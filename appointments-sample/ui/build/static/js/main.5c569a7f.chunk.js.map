{"version":3,"sources":["shared/AppointmentState.ts","shared/common/SignalRNotifications.ts","common/DurableHttpClient.ts","shared/common/Constants.ts","common/DurableEntitySet.ts","App.tsx","index.tsx"],"names":["AppointmentStatusEnum","EntityStateChangedMessage","entityName","entityKey","version","stateDiff","isEntityDestructed","msg","FormatEntityId","BackendBaseUri","DurableHttpClient","_configFabric","NullLogger","instance","request","url","includes","config","this","accessTokenFactory","then","accessToken","headers","fakeUserNamePromise","fakeUserName","DefaultHttpClient","DurableEntitySet","_entityName","attachToAll","items","toLowerCase","makeObservable","observable","attachAllEntities","initSignalR","EntitySets","fetchAndApplyAllEntityStates","entityId","EntityStates","attachEntity","undefined","createEntity","signalName","argument","signalEntity","callEntity","metadata","updateEntityMetadata","initialState","state","makeAutoObservable","fetchAndApplyEntityState","uri","HttpClient","post","content","JSON","stringify","Promise","resolve","reject","response","correlationId","parse","SignalResultPromises","Config","logger","entityState","entitySet","push","i","length","splice","desiredVersion","retryCount","currentEntityState","get","stateContainer","Error","diff","rfc6902","entityAdded","catch","err","MaxRetryCount","setTimeout","RetryBaseIntervalMs","log","LogLevel","item","GetEntityId","Trace","entityDeleted","expectedVersion","responsePromise","errorMessage","result","SignalRConn","HubConnectionBuilder","withUrl","httpClient","build","on","entityStateChangedMessageHandler","entitySignalResponseHandler","onclose","tryToReconnect","Information","start","SignalRReconnectIntervalInMs","setup","l","console","fetch","r","json","appState","userName","user_id","prompt","participantsText","inProgress","appointments","App","observer","participants","split","map","p","trim","filter","newAppointmentId","Date","toISOString","alert","message","finally","AppBar","position","color","className","Toolbar","TextField","fullWidth","label","placeholder","InputLabelProps","shrink","variant","size","value","disabled","onChange","evt","target","onKeyPress","key","preventDefault","createNewAppointment","Box","width","Button","onClick","AccountCircle","Typography","LinearProgress","height","List","appointment","ListItem","Paper","Grid","container","spacing","xs","status","Pending","Chip","Accepted","Declined","Object","keys","name","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c569a7f.chunk.js","sourcesContent":["\r\nexport enum AppointmentStatusEnum {\r\n    Pending = 0,\r\n    Accepted,\r\n    Declined\r\n}\r\n\r\n// Appointment state\r\nexport class AppointmentState\r\n{\r\n    participants: { [name: string]: AppointmentStatusEnum } = {};\r\n    status: AppointmentStatusEnum = AppointmentStatusEnum.Pending;\r\n}","import * as rfc6902 from 'rfc6902';\r\n\r\nexport class EntityStateChangedMessage {\r\n    \r\n    entityName: string = '';\r\n    entityKey: string = '';\r\n    version: number = 0;\r\n    stateDiff: rfc6902.Operation[] = [];\r\n    isEntityDestructed: boolean = false;\r\n\r\n    static GetEntityId(msg: EntityStateChangedMessage): string {\r\n        return EntityStateChangedMessage.FormatEntityId(msg.entityName, msg.entityKey);\r\n    }\r\n\r\n    static FormatEntityId(entityName: string, entityKey: string): string {\r\n        return `@${entityName}@${entityKey}`;\r\n    }\r\n}\r\n\r\nexport class EntitySignalResponseMessage {\r\n\r\n    entityName: string = '';\r\n    entityKey: string = '';\r\n    correlationId: string = '';\r\n    result: any;\r\n    errorMessage: string = '';\r\n}","import { DefaultHttpClient, HttpRequest, HttpResponse, NullLogger } from '@aspnet/signalr';\r\n\r\nimport { IDurableEntitySetConfig } from './IDurableEntitySetConfig';\r\nimport { ClientPrincipalHeaderName } from '../shared/common/Constants';\r\n\r\nexport const BackendBaseUri = '/a/p/i';\r\n\r\n// Custom HttpClient implementation for the purposes of DurableEntitySet\r\nexport class DurableHttpClient extends DefaultHttpClient {\r\n\r\n    constructor(private _configFabric: () => IDurableEntitySetConfig) {\r\n        super(NullLogger.instance);\r\n    }\r\n\r\n    send(request: HttpRequest): Promise<HttpResponse> {\r\n\r\n        // Applying custom config settings, but only when calling our backend\r\n\r\n        if (request.url!.includes(BackendBaseUri)) {\r\n\r\n            const config = this._configFabric();\r\n\r\n            if (!!config.accessTokenFactory) {\r\n                return config.accessTokenFactory().then(accessToken => {\r\n\r\n                    request.headers = {}\r\n                    request.headers['Authorization'] = 'Bearer ' + accessToken;\r\n\r\n                    return super.send(request);\r\n                });\r\n            }\r\n\r\n            if (!!config.fakeUserNamePromise) {\r\n                return config.fakeUserNamePromise.then(fakeUserName => {\r\n\r\n                    if (!!fakeUserName) {\r\n                        request.headers = {}\r\n                        request.headers[ClientPrincipalHeaderName] = fakeUserName;\r\n                    }\r\n\r\n                    return super.send(request);\r\n                });\r\n            }\r\n        }\r\n\r\n        return super.send(request);\r\n    }\r\n}\r\n","\r\nexport const SignalRClientHandlerName = \"entity-state-changed\";\r\n\r\nexport const SignalRSignalResponseHandlerName = \"entity-signal-response\";\r\n\r\nexport const ClientPrincipalHeaderName = 'x-ms-client-principal-name';\r\n\r\nexport const UpdateMetadataServiceMethodName = \"$update-entity-internal-metadata\";\r\n","import { makeAutoObservable, makeObservable, observable } from 'mobx';\r\nimport { HubConnectionBuilder, HubConnection, NullLogger, LogLevel } from '@aspnet/signalr';\r\nimport * as rfc6902 from 'rfc6902';\r\n\r\nimport { ISetEntityMetadataRequest } from '../shared/common/ISetEntityMetadataRequest';\r\nimport { EntityStateChangedMessage, EntitySignalResponseMessage } from '../shared/common/SignalRNotifications';\r\nimport { SignalRClientHandlerName, SignalRSignalResponseHandlerName, UpdateMetadataServiceMethodName } from '../shared/common/Constants';\r\nimport { DurableEntityClientStateContainer } from '../shared/common/DurableEntityClientStateContainer';\r\nimport { IDurableEntitySetConfig } from './IDurableEntitySetConfig';\r\nimport { DurableHttpClient, BackendBaseUri } from './DurableHttpClient';\r\n\r\nexport type EntityStateWithKey = { entityKey: string };\r\n\r\n// Client-side container for Durable Entities\r\nexport class DurableEntitySet<TState extends object> {\r\n\r\n    // All attached entities will appear in this observable array\r\n    items: (TState & EntityStateWithKey)[] = [];\r\n    \r\n    constructor(private _entityName: string, attachToAll: boolean = true) {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        this._entityName = this._entityName.toLowerCase();\r\n\r\n        makeObservable(this, { items: observable });\r\n        \r\n        if (attachToAll) {\r\n            this.attachAllEntities();\r\n        }\r\n    }\r\n\r\n    // Attach all entities of this type (that type you previously passed to ctor).\r\n    // Preloads all existing entities of this type and then automatically captures all newly created entities.\r\n    attachAllEntities(): void {\r\n\r\n        DurableEntitySet.initSignalR();\r\n\r\n        // Registering ourselves as listeners for this type of entity\r\n        DurableEntitySet.EntitySets[this._entityName] = this.items;\r\n\r\n        // Loading all existing entities\r\n        DurableEntitySet.fetchAndApplyAllEntityStates(this._entityName);\r\n    }\r\n\r\n    // Manually attach a single entity with specific key\r\n    attachEntity(entityKey: string): void {\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(this._entityName, entityKey);\r\n\r\n        if (!!DurableEntitySet.EntityStates[entityId]) {\r\n            return;\r\n        }\r\n\r\n        // Registering ourselves as listeners for this particular entity\r\n        DurableEntitySet.EntitySets[entityId] = this.items;\r\n        \r\n        DurableEntitySet.attachEntity(this._entityName, entityKey, undefined as any);\r\n    }\r\n\r\n    // Creates (or fetches existing) an entity\r\n    createEntity(entityKey: string): void {\r\n\r\n        DurableEntitySet.createEntity(this._entityName, entityKey, undefined as any);\r\n    }\r\n\r\n    // Sends a signal to the given entity\r\n    signalEntity(entityKey: string, signalName: string, argument?: any): Promise<void> {\r\n\r\n        return DurableEntitySet.signalEntity(this._entityName, entityKey, signalName, argument);\r\n    }\r\n\r\n    // Sends a signal to the given entity and returns a promise with results\r\n    callEntity(entityKey: string, signalName: string, argument?: any): Promise<any> {\r\n\r\n        return DurableEntitySet.callEntity(this._entityName, entityKey, signalName, argument);\r\n    }\r\n\r\n    // Updates metadata of the given entity\r\n    updateEntityMetadata(entityKey: string, metadata: ISetEntityMetadataRequest): Promise<void> {\r\n\r\n        return DurableEntitySet.updateEntityMetadata(this._entityName, entityKey, metadata);\r\n    }\r\n\r\n    // Produces a single observable state instance for an existing entity\r\n    static attachEntity<TState extends object>(entityName: string, entityKey: string, initialState: TState): TState {\r\n\r\n        DurableEntitySet.initSignalR();\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        entityName = entityName.toLowerCase();\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(entityName, entityKey);\r\n        if (!!this.EntityStates[entityId]) {\r\n            // If it is a known entity, then just returning it\r\n            return this.EntityStates[entityId].state as TState;\r\n        }\r\n\r\n        if (!!initialState) {\r\n            makeAutoObservable(initialState);\r\n        }\r\n\r\n        // Try to asynchronously retrieve the state from server\r\n        this.fetchAndApplyEntityState(entityName, entityKey, 0, 0, initialState);\r\n\r\n        return initialState;\r\n    }\r\n\r\n    // Creates (or fetches existing) and produces a single observable state instance for a newly created entity\r\n    static createEntity<TState extends object>(entityName: string, entityKey: string, initialState: TState): TState {\r\n\r\n        // This empty request will create the entity, if it doesn't exist yet.\r\n        this.updateEntityMetadata(entityName, entityKey, {});\r\n\r\n        return this.attachEntity(entityName, entityKey, initialState);\r\n    }\r\n\r\n    // Sends a signal to the given entity\r\n    static signalEntity(entityName: string, entityKey: string, signalName: string, argument?: any): Promise<void> {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        entityName = entityName.toLowerCase();\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityName}/${entityKey}/${signalName}`;\r\n        return this.HttpClient.post(uri, { content: JSON.stringify(argument) }).then();\r\n    }\r\n\r\n    // Sends a signal to the given entity and returns a promise with results\r\n    static callEntity(entityName: string, entityKey: string, signalName: string, argument?: any): Promise<any> {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        entityName = entityName.toLowerCase();\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityName}/${entityKey}/${signalName}`;\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this.HttpClient.post(uri, { content: JSON.stringify(argument) }).then(response => {\r\n\r\n                const correlationId: string = JSON.parse(response.content as string).correlationId;\r\n                this.SignalResultPromises[correlationId] = { resolve, reject };\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    // Updates metadata of the given entity\r\n    static updateEntityMetadata(entityName: string, entityKey: string, metadata: ISetEntityMetadataRequest): Promise<void> {\r\n\r\n        return this.signalEntity(entityName, entityKey, UpdateMetadataServiceMethodName, metadata);\r\n    }\r\n\r\n    // Optionally setup with these optional settings\r\n    static setup(config: IDurableEntitySetConfig): void {\r\n        this.Config = config;\r\n        if (!this.Config.logger) {\r\n            this.Config.logger = NullLogger.instance;\r\n        }\r\n    }\r\n\r\n    private static Config: IDurableEntitySetConfig = { logger: NullLogger.instance };\r\n    private static HttpClient: DurableHttpClient = new DurableHttpClient(() => DurableEntitySet.Config);\r\n\r\n    private static EntitySets: { [entityName: string]: EntityStateWithKey[] } = {};\r\n    private static EntityStates: { [entityId: string]: DurableEntityClientStateContainer } = {};\r\n    private static SignalResultPromises: { [correlationId: string]: { resolve: (res: any) => void, reject: (err: Error) => void } } = {};\r\n\r\n    private static SignalRConn: HubConnection;\r\n\r\n    private static readonly SignalRReconnectIntervalInMs = 5000;\r\n    private static readonly MaxRetryCount = 6;\r\n    private static readonly RetryBaseIntervalMs = 500;\r\n\r\n    private static entityAdded(entityName: string, entityKey: string, entityState: EntityStateWithKey) {\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(entityName, entityKey);\r\n\r\n        // Searching for entitySet either for this particular entity or for this type of entity\r\n        var entitySet = this.EntitySets[entityId];\r\n        if (!entitySet) {\r\n            entitySet = this.EntitySets[entityName];\r\n        } else {\r\n            delete this.EntitySets[entityId];\r\n        }\r\n\r\n        if (!entitySet) {\r\n            return;\r\n        }\r\n\r\n        // Adding the entityKey property to the state object, to allow binding commands\r\n        entityState.entityKey = entityKey;\r\n        entitySet.push(entityState);\r\n    }\r\n\r\n    private static entityDeleted(entityName: string, entityKey: string) {\r\n\r\n        const entitySet = this.EntitySets[entityName];\r\n        if (!entitySet) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < entitySet.length; i++) {\r\n\r\n            if (entitySet[i].entityKey === entityKey) {\r\n                entitySet.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static fetchAndApplyEntityState(entityName: string, entityKey: string, desiredVersion: number, retryCount: number, currentEntityState: any = null): void {\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityName}/${entityKey}`;\r\n        this.HttpClient.get(uri).then(response => {\r\n\r\n            const stateContainer = JSON.parse(response.content as string) as DurableEntityClientStateContainer;\r\n            const entityId = EntityStateChangedMessage.FormatEntityId(entityName, entityKey);\r\n\r\n            if (!!desiredVersion && (stateContainer.version < desiredVersion)) {\r\n                throw new Error(`Expected ${entityId} of version ${desiredVersion}, but got version ${stateContainer.version}`);\r\n            }\r\n\r\n            if (!currentEntityState) {\r\n\r\n                // If there is no existing state, then using the newly arrived state object\r\n                currentEntityState = stateContainer.state;\r\n                makeAutoObservable(currentEntityState);\r\n                \r\n            } else {\r\n\r\n                // Otherwise applying the change to the existing object, so that UI is re-rendered\r\n                (stateContainer.state as any).entityKey = currentEntityState.entityKey; // Need to preserve the entityKey field, if it is set\r\n                const diff = rfc6902.createPatch(currentEntityState, stateContainer.state);\r\n                rfc6902.applyPatch(currentEntityState, diff);\r\n            }\r\n\r\n            if (!this.EntityStates[entityId]) {\r\n                \r\n                // Adding the newly-arrived state into collections, if any\r\n                this.entityAdded(entityName, entityKey, currentEntityState);\r\n            }\r\n\r\n            // (Re)registering this entity\r\n            this.EntityStates[entityId] = { state: currentEntityState, version: stateContainer.version };\r\n\r\n        }).catch(err => {\r\n\r\n            if (retryCount < this.MaxRetryCount) {\r\n\r\n                // Retrying\r\n                retryCount++;\r\n                setTimeout(() => {\r\n\r\n                    this.fetchAndApplyEntityState(entityName, entityKey, desiredVersion, retryCount, currentEntityState);\r\n\r\n                }, retryCount * this.RetryBaseIntervalMs);\r\n                \r\n            } else {\r\n\r\n                this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to fetch entity state: ${err}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    private static fetchAndApplyAllEntityStates(entityName: string): void {\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityName}`;\r\n        this.HttpClient.get(uri).then(response => {\r\n\r\n            for (var item of JSON.parse(response.content as string)) {\r\n\r\n                const entityKey = item.entityKey;\r\n                const entityId = EntityStateChangedMessage.FormatEntityId(entityName, entityKey);\r\n                const stateContainer = item as DurableEntityClientStateContainer;\r\n\r\n                makeAutoObservable(stateContainer.state);\r\n                this.EntityStates[entityId] = stateContainer;\r\n\r\n                // Adding the newly-arrived state into collections, if any\r\n                this.entityAdded(entityName, entityKey, stateContainer.state as any);\r\n            }\r\n\r\n        }).catch(err => {\r\n            this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to fetch entity states: ${err}`);\r\n        });\r\n    }\r\n\r\n    private static entityStateChangedMessageHandler(msg: EntityStateChangedMessage): void {\r\n\r\n        const entityId = EntityStateChangedMessage.GetEntityId(msg);\r\n\r\n        this.Config.logger!.log(LogLevel.Trace, `DurableEntitySet: ${entityId} changed to version ${msg.version}`);\r\n\r\n        if (msg.isEntityDestructed) {\r\n\r\n            delete this.EntityStates[entityId];\r\n\r\n            this.entityDeleted(msg.entityName, msg.entityKey);\r\n\r\n        } else if (!this.EntityStates[entityId]) {\r\n\r\n            // If anybody is attached to this entity or this type of entity\r\n            if (!!this.EntitySets[entityId] || !!this.EntitySets[msg.entityName]) {\r\n                \r\n                // This entity is not known to us yet, so just trying to fetch its state from server\r\n                setTimeout(() => this.fetchAndApplyEntityState(msg.entityName, msg.entityKey, msg.version, 0), this.RetryBaseIntervalMs);\r\n            }\r\n           \r\n        } else {\r\n\r\n            const expectedVersion = this.EntityStates[entityId].version + 1;\r\n            if (msg.version > expectedVersion) {\r\n                \r\n                // Missed some updates, so now need to reload the state from server\r\n                this.fetchAndApplyEntityState(msg.entityName, msg.entityKey, msg.version, 0, this.EntityStates[entityId].state);\r\n\r\n            } else if (msg.version === expectedVersion) {\r\n\r\n                // Applying the change\r\n                rfc6902.applyPatch(this.EntityStates[entityId].state, msg.stateDiff);\r\n                this.EntityStates[entityId].version = msg.version;\r\n            }            \r\n        }\r\n    }\r\n\r\n    private static entitySignalResponseHandler(msg: EntitySignalResponseMessage): void {\r\n\r\n        const responsePromise = this.SignalResultPromises[msg.correlationId];\r\n        if (!responsePromise) {\r\n            return;\r\n        }\r\n\r\n        if (!msg.errorMessage) {\r\n            responsePromise.resolve(msg.result);\r\n        } else {\r\n            responsePromise.reject(new Error(msg.errorMessage));\r\n        }\r\n\r\n        delete this.SignalResultPromises[msg.correlationId];\r\n    }\r\n\r\n    private static initSignalR(): void {\r\n\r\n        if (!!this.SignalRConn) {\r\n            return;\r\n        }\r\n\r\n        // Configuring SignalR\r\n        this.SignalRConn = new HubConnectionBuilder()\r\n            .withUrl(`${BackendBaseUri}`, { httpClient: this.HttpClient, logger: this.Config.logger })\r\n            .build();\r\n\r\n        // Mounting event handlers\r\n        this.SignalRConn.on(SignalRClientHandlerName, msg => this.entityStateChangedMessageHandler(msg));\r\n        this.SignalRConn.on(SignalRSignalResponseHandlerName, msg => this.entitySignalResponseHandler(msg));\r\n\r\n        // Background reconnects are essential here. That's because in 'Default' or 'Classic' service mode\r\n        // clients get forcibly disconnected, when your backend restarts.\r\n        this.SignalRConn.onclose(() => {\r\n            var tryToReconnect = () => {\r\n                this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: reconnecting to SignalR...`);\r\n                this.SignalRConn.start().then(() => {\r\n                    this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: reconnected to SignalR`);\r\n                }, () => {\r\n                    setTimeout(tryToReconnect, this.SignalRReconnectIntervalInMs);\r\n                })\r\n            }\r\n            tryToReconnect();\r\n        });\r\n\r\n        // Establishing SignalR connection\r\n        this.SignalRConn.start().then(\r\n            () => {\r\n                this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: successfully connected to SignalR`);\r\n            }, err => {\r\n                this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to connect to SignalR: ${err}`);\r\n            });\r\n    }\r\n}","import React from 'react';\r\nimport { makeAutoObservable } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { AppBar, Button, Box, Chip, Grid, LinearProgress, List, ListItem, Paper, TextField, Toolbar, Typography } from '@material-ui/core';\r\nimport { AccountCircle } from '@material-ui/icons';\r\n\r\nimport { DurableEntitySet } from './common/DurableEntitySet';\r\nimport { AppointmentState, AppointmentStatusEnum } from './shared/AppointmentState';\r\n\r\n// Setting up DurableEntitySet\r\nDurableEntitySet.setup({\r\n    logger: { log: (l, msg: string) => console.log(msg) },\r\n\r\n    fakeUserNamePromise: new Promise<string | null>((resolve) => {\r\n\r\n        // Trying to fetch current user name from server - this should work when deployed to Azure and EasyAuth properly configured\r\n        fetch('/.auth/me').then(r => r.json()).then(result => {\r\n\r\n            if (!result || !result.length) {\r\n                throw new Error('EasyAuth seems to be not configured. Falling back to a fake user name');\r\n            }\r\n\r\n            appState.userName = result[0].user_id;\r\n\r\n            // By returning null here we tell DurableEntitySet to proceed with using EasyAuth\r\n            resolve(null);\r\n\r\n        }).catch(() => {\r\n\r\n            // Asking the user for some fake user name. Obviously, we should never do it like that in production.\r\n            appState.userName = prompt('Enter your name:', 'Anonymous') as string;\r\n            resolve(appState.userName);\r\n        });\r\n    })\r\n});\r\n\r\n// App state container\r\nconst appState = makeAutoObservable({\r\n    userName: '',\r\n\r\n    participantsText: '',\r\n\r\n    inProgress: false,\r\n\r\n    // Here all appointment entities will appear\r\n    appointments: new DurableEntitySet<AppointmentState>('AppointmentEntity')\r\n});\r\n\r\n// Rendering that entity state\r\nexport const App = observer(\r\n    class App extends React.Component {\r\n\r\n        private createNewAppointment() {\r\n\r\n            const participants = appState.participantsText\r\n                .split(',')\r\n                .map(p => p.trim())\r\n                .filter(p => !!p);\r\n\r\n            // Generating unique entity key\r\n            const newAppointmentId = 'APP-' + new Date().toISOString();\r\n\r\n            // Creating a new entity\r\n            appState.inProgress = true;\r\n            appState.appointments.callEntity(newAppointmentId, 'init', participants)\r\n                .catch(err => alert(err.message))\r\n                .finally(() => { appState.inProgress = false; });\r\n\r\n            appState.participantsText = '';\r\n        }\r\n\r\n        render(): JSX.Element { return (<>\r\n\r\n            <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                <Toolbar>\r\n\r\n                    <TextField\r\n                        fullWidth\r\n                        label=\"Comma-separated list of participants (or empty string to create appointment with yourself)\"\r\n                        placeholder=\"Alice, Bob, Charlie...\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={appState.participantsText}\r\n                        disabled={appState.inProgress}\r\n                        onChange={(evt) => appState.participantsText = evt.target.value as string}\r\n                        onKeyPress={(evt) => {\r\n                            if (evt.key === 'Enter') {\r\n                                evt.preventDefault();\r\n                                this.createNewAppointment();\r\n                            }\r\n                        }}\r\n                    />\r\n\r\n                    <Box width={20} />\r\n\r\n                    <Button variant=\"contained\" color=\"default\" size=\"large\" className=\"new-appointment-button\"\r\n                        disabled={appState.inProgress}\r\n                        onClick={() => this.createNewAppointment()}\r\n                    >\r\n                        Create new appointment\r\n                    </Button>\r\n\r\n                    <Box width={40} />\r\n\r\n                    <AccountCircle />\r\n                    <Box width={5} />\r\n                    <Typography>{appState.userName}</Typography>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {appState.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n            <List>\r\n\r\n                {appState.appointments.items.length === 0 && (\r\n                    <Typography variant=\"h5\" className=\"empty-list-placeholder\" >\r\n                        No appointments created yet\r\n                    </Typography>\r\n                )}\r\n\r\n                {appState.appointments.items.map(appointment => (<ListItem><Paper className=\"appointment-paper\">\r\n\r\n                    <Grid container spacing={2}>\r\n\r\n                        <Grid item xs={2}>\r\n                            {appointment.status === AppointmentStatusEnum.Pending && (\r\n                                <Chip label=\"Pending\" color=\"default\" variant=\"outlined\" className=\"appointment-status-chip\" />\r\n                            )}\r\n                            {appointment.status === AppointmentStatusEnum.Accepted && (\r\n                                <Chip label=\"Everybody accepted\" color=\"primary\" variant=\"outlined\" className=\"appointment-status-chip\" />\r\n                            )}\r\n                            {appointment.status === AppointmentStatusEnum.Declined && (\r\n                                <Chip label=\"Someone declined\" color=\"secondary\" variant=\"outlined\" className=\"appointment-status-chip\" />\r\n                            )}\r\n                        </Grid>\r\n\r\n                        <Grid item xs={2}>\r\n                            <Typography className=\"participants-text\">Participants:</Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={5} className=\"appointment-grid-cell\">\r\n                            {Object.keys(appointment.participants).map(name => (\r\n                                <Chip label={name}\r\n                                    color={appointment.participants[name] === AppointmentStatusEnum.Accepted ? 'primary' :\r\n                                        (appointment.participants[name] === AppointmentStatusEnum.Declined ? 'secondary' : 'default')}\r\n                                    className=\"participant-chip\"\r\n                                />\r\n                            ))}\r\n                        </Grid>\r\n\r\n                        <Grid item xs={1}>\r\n                            <Button fullWidth variant=\"contained\" color=\"primary\"\r\n                                disabled={appState.inProgress || appointment.status !== AppointmentStatusEnum.Pending}\r\n                                onClick={() => {\r\n                                    appState.inProgress = true;\r\n                                    appState.appointments.callEntity(appointment.entityKey, 'respond', true)\r\n                                        .catch(err => alert(err.message))\r\n                                        .finally(() => { appState.inProgress = false; });\r\n                                }}\r\n                            >\r\n                                Accept\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={1}>\r\n                            <Button fullWidth variant=\"contained\" color=\"secondary\"\r\n                                disabled={appState.inProgress || appointment.status !== AppointmentStatusEnum.Pending}\r\n                                onClick={() => {\r\n                                    appState.inProgress = true;\r\n                                    appState.appointments.callEntity(appointment.entityKey, 'respond', false)\r\n                                        .catch(err => alert(err.message))\r\n                                        .finally(() => { appState.inProgress = false; });\r\n                                }}\r\n                            >\r\n                                Decline\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={1}>\r\n                            <Button fullWidth variant=\"contained\" color=\"default\"\r\n                                disabled={appState.inProgress || appointment.status === AppointmentStatusEnum.Pending}\r\n                                onClick={() => {\r\n                                    appState.inProgress = true;\r\n                                    appState.appointments.callEntity(appointment.entityKey, 'delete')\r\n                                        .catch(err => alert(err.message))\r\n                                        .finally(() => { appState.inProgress = false; });\r\n                                }}\r\n                            >\r\n                                Delete\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </Paper></ListItem>))}\r\n            </List>\r\n        </>);}\r\n    }\r\n);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}