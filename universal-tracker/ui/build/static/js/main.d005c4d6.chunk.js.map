{"version":3,"sources":["shared/common/SignalRNotifications.ts","shared/common/DurableEntityClientStateContainer.ts","common/DurableHttpClient.ts","shared/common/Constants.ts","common/EntityStateMap.ts","common/DurableEntitySet.ts","MapControl.tsx","App.tsx","index.tsx"],"names":["EntityStateChangedMessage","entityName","entityKey","version","stateDiff","isEntityDestructed","msg","FormatEntityId","DurableEntityClientStateContainer","state","entityId","match","exec","entityNameLowerCase","BackendBaseUri","DurableHttpClient","_configFabric","NullLogger","instance","request","url","includes","config","this","accessTokenFactory","then","accessToken","headers","fakeUserNamePromise","fakeUserName","DefaultHttpClient","EntityStateMap","_maxKnownEntityIdsToPersist","States","LocalStorageKnownIdsKey","Object","assign","stateContainer","localStorage","entityIds","keys","slice","setItem","JSON","stringify","entityIdsJson","getItem","parse","filter","id","GetEntityNameAndKey","removeItem","DurableEntitySet","attachToAll","items","_entityNameLowerCase","toLowerCase","makeObservable","observable","attachAllEntities","initSignalR","EntitySets","fetchAndApplyKnownEntityStates","fetchAndApplyAllEntityStates","EntityStates","getState","attachEntity","undefined","createEntity","signalName","argument","signalEntity","callEntity","metadata","updateEntityMetadata","initialState","existingEntity","makeAutoObservable","fetchAndApplyEntityState","uri","encodeURI","HttpClient","post","content","Promise","resolve","reject","response","correlationId","SignalResultPromises","Config","logger","entityState","entitySet","push","i","length","splice","desiredVersion","retryCount","currentEntityState","get","Error","applyStateChangesFrom","entityAdded","addOrUpdateState","catch","err","MaxRetryCount","setTimeout","RetryBaseIntervalMs","log","LogLevel","existingEntityStates","getStatesCopy","item","existingStateContainer","Information","deletedEntityId","removeState","nameAndKey","entityDeleted","getStoredEntityIds","stateContainers","Warning","removeStoredEntityIds","GetEntityId","Trace","expectedVersion","rfc6902","responsePromise","errorMessage","result","SignalRConn","HubConnectionBuilder","withUrl","httpClient","build","on","entityStateChangedMessageHandler","entitySignalResponseHandler","onclose","reconnectToSignalR","start","SignalRReconnectIntervalInMs","incomingEntityState","diff","DefaultMaxKnownEntityIdsToPersist","maxKnownEntityIdsToPersist","MapControl","observer","map","atlas","props","style","language","authOptions","authType","subscriptionKey","azureMapSubscriptionKey","events","add","controls","ZoomControl","position","BottomRight","sources","dataSource","layer","LineLayer","strokeColor","strokeWidth","layers","autorun","setCamera","bounds","padding","className","React","setup","l","console","fetch","r","json","appState","userName","user_id","prompt","entities","nameText","urlText","queryText","inProgress","mapDataSources","finally","App","startTimes","points","Date","time","getTime","minTime","Math","min","AppBar","color","Toolbar","TextField","label","placeholder","InputLabelProps","shrink","variant","size","value","disabled","onChange","evt","target","Box","width","fullWidth","Button","onClick","createNewEntity","AccountCircle","Typography","LinearProgress","height","List","entity","lastValue","valueToString","ListItem","Paper","Grid","container","spacing","xs","name","InputProps","readOnly","alert","message","error","renderGraph","btoa","replaceAll","params","query","firstValue","isNaN","isConfigSettingDefined","AzureMapSubscriptionKey","Array","isArray","renderMap","renderHorizontalBars","renderLineGraph","data","p","x","y","Number","now","window","innerWidth","stackBy","xType","xDomain","margin","left","tickTotal","stringToColorCode","firstTime","curTime","nextTime","stringValue","timeDiff","top","opacity","barWidth","title","substr","orientation","DataSource","clear","Feature","LineString","BoundingBox","fromPositions","val","str","hashCode","charCodeAt","toString","startsWith","endsWith","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d005c4d6.chunk.js","sourcesContent":["import * as rfc6902 from 'rfc6902';\r\n\r\nexport class EntityStateChangedMessage {\r\n    \r\n    entityName: string = '';\r\n    entityKey: string = '';\r\n    version: number = 0;\r\n    stateDiff: rfc6902.Operation[] = [];\r\n    isEntityDestructed: boolean = false;\r\n\r\n    static GetEntityId(msg: EntityStateChangedMessage): string {\r\n        return EntityStateChangedMessage.FormatEntityId(msg.entityName, msg.entityKey);\r\n    }\r\n\r\n    static FormatEntityId(entityName: string, entityKey: string): string {\r\n        return `@${entityName}@${entityKey}`;\r\n    }\r\n}\r\n\r\nexport class EntitySignalResponseMessage {\r\n\r\n    entityName: string = '';\r\n    entityKey: string = '';\r\n    correlationId: string = '';\r\n    result: any;\r\n    errorMessage: string = '';\r\n}","\r\n// A client-side wrapper around entity's state, with some extra metadata added\r\nexport class DurableEntityClientStateContainer {\r\n\r\n    version: number = 0;\r\n    state: object = {};\r\n\r\n    // Helper method for parsing entityIds\r\n    public static GetEntityNameAndKey(entityId: string): { entityNameLowerCase: string, entityKey: string } {\r\n        \r\n        const match = /@([^@]+)@(.+)/.exec(entityId);\r\n        return { entityNameLowerCase: !match ? '' : match[1], entityKey: !match ? '' : match[2] };\r\n    }\r\n}","import { DefaultHttpClient, HttpRequest, HttpResponse, NullLogger } from '@aspnet/signalr';\r\n\r\nimport { IDurableEntitySetConfig } from './IDurableEntitySetConfig';\r\nimport { ClientPrincipalHeaderName } from '../shared/common/Constants';\r\n\r\nexport const BackendBaseUri = '/a/p/i';\r\n\r\n// Custom HttpClient implementation for the purposes of DurableEntitySet\r\nexport class DurableHttpClient extends DefaultHttpClient {\r\n\r\n    constructor(private _configFabric: () => IDurableEntitySetConfig) {\r\n        super(NullLogger.instance);\r\n    }\r\n\r\n    send(request: HttpRequest): Promise<HttpResponse> {\r\n\r\n        // Applying custom config settings, but only when calling our backend\r\n\r\n        if (request.url!.includes(BackendBaseUri)) {\r\n\r\n            const config = this._configFabric();\r\n\r\n            if (!!config.accessTokenFactory) {\r\n                return config.accessTokenFactory().then(accessToken => {\r\n\r\n                    request.headers = {}\r\n                    request.headers['Authorization'] = 'Bearer ' + accessToken;\r\n\r\n                    return super.send(request);\r\n                });\r\n            }\r\n\r\n            if (!!config.fakeUserNamePromise) {\r\n                return config.fakeUserNamePromise.then(fakeUserName => {\r\n\r\n                    if (!!fakeUserName) {\r\n                        request.headers = {}\r\n                        request.headers[ClientPrincipalHeaderName] = fakeUserName;\r\n                    }\r\n\r\n                    return super.send(request);\r\n                });\r\n            }\r\n        }\r\n\r\n        return super.send(request);\r\n    }\r\n}\r\n","\r\nexport const SignalRClientHandlerName = \"entity-state-changed\";\r\n\r\nexport const SignalRSignalResponseHandlerName = \"entity-signal-response\";\r\n\r\nexport const ClientPrincipalHeaderName = 'x-ms-client-principal-name';\r\n\r\nexport const UpdateMetadataServiceMethodName = \"$update-entity-internal-metadata\";\r\n","import { DurableEntityClientStateContainer } from '../shared/common/DurableEntityClientStateContainer';\r\n\r\n// Map-like storage for all known entity states\r\nexport class EntityStateMap {\r\n\r\n    constructor(private _maxKnownEntityIdsToPersist: () => number) {\r\n    }\r\n\r\n    public getState(entityId: string): DurableEntityClientStateContainer {\r\n        return this.States[entityId];\r\n    }\r\n\r\n    public getStatesCopy(): { [entityId: string]: DurableEntityClientStateContainer } {\r\n        return Object.assign({}, this.States);\r\n    }\r\n\r\n    public addOrUpdateState(entityId: string, stateContainer: DurableEntityClientStateContainer): void {\r\n        this.States[entityId] = stateContainer;\r\n\r\n        if (!!localStorage) {\r\n\r\n            const entityIds = Object.keys(this.States).slice(0, this._maxKnownEntityIdsToPersist());\r\n            localStorage.setItem(this.LocalStorageKnownIdsKey, JSON.stringify(entityIds));\r\n        }\r\n    }\r\n\r\n    public removeState(entityId: string): void {\r\n        delete this.States[entityId];\r\n\r\n        if (!!localStorage) {\r\n\r\n            const entityIds = Object.keys(this.States).slice(0, this._maxKnownEntityIdsToPersist());\r\n            localStorage.setItem(this.LocalStorageKnownIdsKey, JSON.stringify(entityIds));\r\n        }\r\n    }\r\n\r\n    public getStoredEntityIds(entityNameLowerCase: string): string[] {\r\n\r\n        if (!localStorage) {\r\n            return [];\r\n        }\r\n\r\n        const entityIdsJson = localStorage.getItem(this.LocalStorageKnownIdsKey);\r\n        if (!entityIdsJson) {\r\n            return [];\r\n        }\r\n\r\n        return (JSON.parse(entityIdsJson) as string[])\r\n            .filter(id => DurableEntityClientStateContainer.GetEntityNameAndKey(id).entityNameLowerCase === entityNameLowerCase);\r\n    }\r\n\r\n    public removeStoredEntityIds(entityNameLowerCase: string): void {\r\n        if (!!localStorage) {\r\n            localStorage.removeItem(this.LocalStorageKnownIdsKey);\r\n        }\r\n    }\r\n\r\n    private States: { [entityId: string]: DurableEntityClientStateContainer } = {};\r\n    private readonly LocalStorageKnownIdsKey = 'DurableEntitySetKnownEntityIds';\r\n}","import { makeAutoObservable, makeObservable, observable } from 'mobx';\r\nimport { HubConnectionBuilder, HubConnection, NullLogger, LogLevel } from '@aspnet/signalr';\r\nimport * as rfc6902 from 'rfc6902';\r\n\r\nimport { ISetEntityMetadataRequest } from '../shared/common/ISetEntityMetadataRequest';\r\nimport { EntityStateChangedMessage, EntitySignalResponseMessage } from '../shared/common/SignalRNotifications';\r\nimport { SignalRClientHandlerName, SignalRSignalResponseHandlerName, UpdateMetadataServiceMethodName } from '../shared/common/Constants';\r\nimport { DurableEntityClientStateContainer } from '../shared/common/DurableEntityClientStateContainer';\r\nimport { IDurableEntitySetConfig } from './IDurableEntitySetConfig';\r\nimport { DurableHttpClient, BackendBaseUri } from './DurableHttpClient';\r\nimport { EntityStateMap } from './EntityStateMap';\r\n\r\nexport type EntityStateWithKey = { entityKey: string };\r\n\r\n// Client-side container for Durable Entities\r\nexport class DurableEntitySet<TState extends object> {\r\n\r\n    // All attached entities will appear in this observable array\r\n    items: (TState & EntityStateWithKey)[] = [];\r\n    \r\n    constructor(entityName: string, attachToAll: boolean = true) {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        this._entityNameLowerCase = entityName.toLowerCase();\r\n\r\n        makeObservable(this, { items: observable });\r\n        \r\n        if (attachToAll) {\r\n            this.attachAllEntities();\r\n        }\r\n    }\r\n\r\n    // Attach all entities of this type (that type you previously passed to ctor).\r\n    // Preloads all existing entities of this type and then automatically captures all newly created entities.\r\n    attachAllEntities(): Promise<void> {\r\n\r\n        DurableEntitySet.initSignalR();\r\n\r\n        // Registering ourselves as listeners for this type of entity\r\n        DurableEntitySet.EntitySets[this._entityNameLowerCase] = this.items;\r\n\r\n        // First trying to fetch states for stored entityIds\r\n        return DurableEntitySet.fetchAndApplyKnownEntityStates(this._entityNameLowerCase)\r\n            // Then still always doing a mass-load, because some entities might be added/removed during the offline period\r\n            .then(() => DurableEntitySet.fetchAndApplyAllEntityStates(this._entityNameLowerCase));\r\n    }\r\n\r\n    // Manually attach a single entity with specific key\r\n    attachEntity(entityKey: string): void {\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(this._entityNameLowerCase, entityKey);\r\n\r\n        if (!!DurableEntitySet.EntityStates.getState(entityId)) {\r\n            return;\r\n        }\r\n\r\n        // Registering ourselves as listeners for this particular entity\r\n        DurableEntitySet.EntitySets[entityId] = this.items;\r\n        \r\n        DurableEntitySet.attachEntity(this._entityNameLowerCase, entityKey, undefined as any);\r\n    }\r\n\r\n    // Creates (or fetches existing) an entity\r\n    createEntity(entityKey: string): void {\r\n\r\n        DurableEntitySet.createEntity(this._entityNameLowerCase, entityKey, undefined as any);\r\n    }\r\n\r\n    // Sends a signal to the given entity\r\n    signalEntity(entityKey: string, signalName: string, argument?: any): Promise<void> {\r\n\r\n        return DurableEntitySet.signalEntity(this._entityNameLowerCase, entityKey, signalName, argument);\r\n    }\r\n\r\n    // Sends a signal to the given entity and returns a promise with results\r\n    callEntity(entityKey: string, signalName: string, argument?: any): Promise<any> {\r\n\r\n        return DurableEntitySet.callEntity(this._entityNameLowerCase, entityKey, signalName, argument);\r\n    }\r\n\r\n    // Updates metadata of the given entity\r\n    updateEntityMetadata(entityKey: string, metadata: ISetEntityMetadataRequest): Promise<void> {\r\n\r\n        return DurableEntitySet.updateEntityMetadata(this._entityNameLowerCase, entityKey, metadata);\r\n    }\r\n\r\n    // Lower-cased entity class name\r\n    private readonly _entityNameLowerCase: string;\r\n\r\n    // Produces a single observable state instance for an existing entity\r\n    static attachEntity<TState extends object>(entityName: string, entityKey: string, initialState: TState): TState {\r\n\r\n        DurableEntitySet.initSignalR();\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        const entityNameLowerCase = entityName.toLowerCase();\r\n\r\n        const existingEntity = this.EntityStates.getState(EntityStateChangedMessage.FormatEntityId(entityNameLowerCase, entityKey));\r\n        if (!!existingEntity) {\r\n            // If it is a known entity, then just returning it\r\n            return existingEntity.state as TState;\r\n        }\r\n\r\n        if (!!initialState) {\r\n            makeAutoObservable(initialState);\r\n        }\r\n\r\n        // Try to asynchronously retrieve the state from server\r\n        this.fetchAndApplyEntityState(entityNameLowerCase, entityKey, 0, 0, initialState);\r\n\r\n        return initialState;\r\n    }\r\n\r\n    // Creates (or fetches existing) and produces a single observable state instance for a newly created entity\r\n    static createEntity<TState extends object>(entityName: string, entityKey: string, initialState: TState): TState {\r\n\r\n        // This empty request will create the entity, if it doesn't exist yet.\r\n        this.updateEntityMetadata(entityName, entityKey, {});\r\n\r\n        return this.attachEntity(entityName, entityKey, initialState);\r\n    }\r\n\r\n    // Sends a signal to the given entity\r\n    static signalEntity(entityName: string, entityKey: string, signalName: string, argument?: any): Promise<void> {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        const entityNameLowerCase = entityName.toLowerCase();\r\n\r\n        const uri = `${BackendBaseUri}/entities/${encodeURI(entityNameLowerCase)}/${encodeURI(entityKey)}/${encodeURI(signalName)}`;\r\n        return this.HttpClient.post(uri, { content: JSON.stringify(argument) }).then();\r\n    }\r\n\r\n    // Sends a signal to the given entity and returns a promise with results\r\n    static callEntity(entityName: string, entityKey: string, signalName: string, argument?: any): Promise<any> {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        const entityNameLowerCase = entityName.toLowerCase();\r\n\r\n        const uri = `${BackendBaseUri}/entities/${encodeURI(entityNameLowerCase)}/${encodeURI(entityKey)}/${encodeURI(signalName)}`;\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this.HttpClient.post(uri, { content: JSON.stringify(argument) }).then(response => {\r\n\r\n                const correlationId: string = JSON.parse(response.content as string).correlationId;\r\n                this.SignalResultPromises[correlationId] = { resolve, reject };\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    // Updates metadata of the given entity\r\n    static updateEntityMetadata(entityName: string, entityKey: string, metadata: ISetEntityMetadataRequest): Promise<void> {\r\n\r\n        return this.signalEntity(entityName, entityKey, UpdateMetadataServiceMethodName, metadata);\r\n    }\r\n\r\n    // Optionally setup with these optional settings\r\n    static setup(config: IDurableEntitySetConfig): void {\r\n        this.Config = config;\r\n        if (!this.Config.logger) {\r\n            this.Config.logger = NullLogger.instance;\r\n        }\r\n    }\r\n\r\n    private static Config: IDurableEntitySetConfig = { logger: NullLogger.instance };\r\n    private static HttpClient: DurableHttpClient = new DurableHttpClient(() => DurableEntitySet.Config);\r\n    private static EntitySets: { [entityName: string]: EntityStateWithKey[] } = {};\r\n    private static SignalResultPromises: { [correlationId: string]: { resolve: (res: any) => void, reject: (err: Error) => void } } = {};\r\n\r\n    private static SignalRConn: HubConnection;\r\n\r\n    private static readonly SignalRReconnectIntervalInMs = 5000;\r\n    private static readonly MaxRetryCount = 6;\r\n    private static readonly RetryBaseIntervalMs = 500;\r\n    private static readonly DefaultMaxKnownEntityIdsToPersist = 100;\r\n\r\n    private static EntityStates = new EntityStateMap(() =>\r\n        DurableEntitySet.Config.maxKnownEntityIdsToPersist === undefined ?\r\n            DurableEntitySet.DefaultMaxKnownEntityIdsToPersist :\r\n            DurableEntitySet.Config.maxKnownEntityIdsToPersist\r\n    );\r\n\r\n    private static entityAdded(entityNameLowerCase: string, entityKey: string, entityState: EntityStateWithKey) {\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(entityNameLowerCase, entityKey);\r\n\r\n        // Searching for entitySet either for this particular entity or for this type of entity\r\n        var entitySet = this.EntitySets[entityId];\r\n        if (!entitySet) {\r\n            entitySet = this.EntitySets[entityNameLowerCase];\r\n        } else {\r\n            delete this.EntitySets[entityId];\r\n        }\r\n\r\n        if (!entitySet) {\r\n            return;\r\n        }\r\n\r\n        // Adding the entityKey property to the state object, to allow binding commands\r\n        entityState.entityKey = entityKey;\r\n        entitySet.push(entityState);\r\n    }\r\n\r\n    private static entityDeleted(entityNameLowerCase: string, entityKey: string) {\r\n\r\n        const entitySet = this.EntitySets[entityNameLowerCase];\r\n        if (!entitySet) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < entitySet.length; i++) {\r\n\r\n            if (entitySet[i].entityKey === entityKey) {\r\n                entitySet.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static fetchAndApplyEntityState(entityNameLowerCase: string, entityKey: string, desiredVersion: number, retryCount: number, currentEntityState: any = null): void {\r\n\r\n        const uri = `${BackendBaseUri}/entities/${encodeURI(entityNameLowerCase)}/${encodeURI(entityKey)}`;\r\n        this.HttpClient.get(uri).then(response => {\r\n\r\n            const stateContainer = JSON.parse(response.content as string) as DurableEntityClientStateContainer;\r\n            const entityId = EntityStateChangedMessage.FormatEntityId(entityNameLowerCase, entityKey);\r\n\r\n            if (!!desiredVersion && (stateContainer.version < desiredVersion)) {\r\n                throw new Error(`Expected ${entityId} of version ${desiredVersion}, but got version ${stateContainer.version}`);\r\n            }\r\n\r\n            if (!currentEntityState) {\r\n\r\n                // If there is no existing state, then using the newly arrived state object\r\n                currentEntityState = stateContainer.state;\r\n                makeAutoObservable(currentEntityState);\r\n                \r\n            } else {\r\n\r\n                // Otherwise applying the change to the existing object, so that UI is re-rendered\r\n                this.applyStateChangesFrom(currentEntityState, stateContainer.state);\r\n            }\r\n\r\n            if (!this.EntityStates.getState(entityId)) {\r\n                \r\n                // Adding the newly-arrived state into collections, if any\r\n                this.entityAdded(entityNameLowerCase, entityKey, currentEntityState);\r\n            }\r\n\r\n            // (Re)registering this entity\r\n            this.EntityStates.addOrUpdateState(entityId, { state: currentEntityState, version: stateContainer.version });\r\n\r\n        }).catch(err => {\r\n\r\n            if (retryCount < this.MaxRetryCount) {\r\n\r\n                // Retrying\r\n                retryCount++;\r\n                setTimeout(() => {\r\n\r\n                    this.fetchAndApplyEntityState(entityNameLowerCase, entityKey, desiredVersion, retryCount, currentEntityState);\r\n\r\n                }, retryCount * this.RetryBaseIntervalMs);\r\n                \r\n            } else {\r\n\r\n                this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to fetch entity state: ${err}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    private static fetchAndApplyAllEntityStates(entityNameLowerCase: string): Promise<void> {\r\n\r\n        // Making a shallow copy of current known states BEFORE triggering a call, \r\n        // so that if any entity is removed during the call, it doesn't re-appear.\r\n        const existingEntityStates = this.EntityStates.getStatesCopy();\r\n\r\n        const uri = `${BackendBaseUri}/entities/${encodeURI(entityNameLowerCase)}`;\r\n        return this.HttpClient.get(uri).then(response => {\r\n\r\n            for (var item of JSON.parse(response.content as string)) {\r\n\r\n                const entityKey = item.entityKey;\r\n                const entityId = EntityStateChangedMessage.FormatEntityId(entityNameLowerCase, entityKey);\r\n                const stateContainer = item as DurableEntityClientStateContainer;\r\n\r\n                const existingStateContainer = existingEntityStates[entityId];\r\n                delete existingEntityStates[entityId];\r\n\r\n                if (!existingStateContainer) {\r\n\r\n                    makeAutoObservable(stateContainer.state);\r\n                    this.EntityStates.addOrUpdateState(entityId, stateContainer);\r\n\r\n                    // Adding the newly-arrived state into collections, if any\r\n                    this.entityAdded(entityNameLowerCase, entityKey, stateContainer.state as any);\r\n                    \r\n\r\n                } else if (existingStateContainer.version < stateContainer.version) {\r\n\r\n                    this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: ${entityId}, local version ${existingStateContainer.version}, remote version ${stateContainer.version}. State was updated.`);\r\n\r\n                    // Otherwise applying the change to the existing object, so that UI is re-rendered\r\n                    this.applyStateChangesFrom(existingStateContainer.state, stateContainer.state);\r\n                    existingStateContainer.version = stateContainer.version;\r\n\r\n                } else {\r\n\r\n                    this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: ${entityId} is already known and is up to date. Skipping.`);\r\n                }\r\n            }\r\n\r\n            // Dropping instances that might have appeared up to this point\r\n            for (const deletedEntityId in existingEntityStates) {\r\n\r\n                this.EntityStates.removeState(deletedEntityId);\r\n                const nameAndKey = DurableEntityClientStateContainer.GetEntityNameAndKey(deletedEntityId);\r\n                this.entityDeleted(nameAndKey.entityNameLowerCase, nameAndKey.entityKey);\r\n            }\r\n\r\n        }).catch(err => {\r\n            this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to fetch entity states: ${err}`);\r\n        });\r\n    }\r\n\r\n    private static fetchAndApplyKnownEntityStates(entityNameLowerCase: string): Promise<void> {\r\n\r\n        const entityIds = this.EntityStates.getStoredEntityIds(entityNameLowerCase);\r\n\r\n        // Making a shallow copy of current known states BEFORE triggering a call, \r\n        // so that if any entity is removed during the call, it doesn't re-appear.\r\n        const existingEntityStates = this.EntityStates.getStatesCopy();\r\n\r\n        const uri = `${BackendBaseUri}/entities`;\r\n        return this.HttpClient.post(uri, { content: JSON.stringify(entityIds) }).then(response => {\r\n\r\n            const stateContainers = JSON.parse(response.content as string) as DurableEntityClientStateContainer[];\r\n\r\n            for (var i = 0; i < entityIds.length; i++) {\r\n\r\n                const entityId = entityIds[i];\r\n                const nameAndKey = DurableEntityClientStateContainer.GetEntityNameAndKey(entityId);\r\n                const stateContainer = stateContainers[i];\r\n\r\n                const existingStateContainer = existingEntityStates[entityId];\r\n                if (!existingStateContainer) {\r\n\r\n                    makeAutoObservable(stateContainer.state);\r\n                    this.EntityStates.addOrUpdateState(entityId, stateContainer);\r\n\r\n                    // Adding the newly-arrived state into collections, if any\r\n                    this.entityAdded(nameAndKey.entityNameLowerCase, nameAndKey.entityKey, stateContainer.state as any);\r\n                    \r\n\r\n                } else if (existingStateContainer.version < stateContainer.version) {\r\n\r\n                    this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: ${entityId}, local version ${existingStateContainer.version}, remote version ${stateContainer.version}. State was updated.`);\r\n\r\n                    // Otherwise applying the change to the existing object, so that UI is re-rendered\r\n                    this.applyStateChangesFrom(existingStateContainer.state, stateContainer.state);\r\n                    existingStateContainer.version = stateContainer.version;\r\n\r\n                } else {\r\n\r\n                    this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: ${entityId} is already known and is up to date. Skipping.`);\r\n                }\r\n            }\r\n\r\n        }).catch(err => {\r\n\r\n            this.Config.logger!.log(LogLevel.Warning, `DurableEntitySet: failed to fetch known entity states: ${err}`);\r\n\r\n            // In most cases this error indicates, that our stored entityIds are no longer valid, so we'd better drop them\r\n            this.EntityStates.removeStoredEntityIds(entityNameLowerCase);\r\n        });\r\n    }\r\n    \r\n    private static entityStateChangedMessageHandler(msg: EntityStateChangedMessage): void {\r\n\r\n        const entityId = EntityStateChangedMessage.GetEntityId(msg);\r\n\r\n        this.Config.logger!.log(LogLevel.Trace, `DurableEntitySet: ${entityId} changed to version ${msg.version}`);\r\n\r\n        const existingStateContainer = this.EntityStates.getState(entityId);\r\n        if (msg.isEntityDestructed) {\r\n\r\n            this.EntityStates.removeState(entityId);\r\n\r\n            this.entityDeleted(msg.entityName, msg.entityKey);\r\n\r\n        } else if (!existingStateContainer) {\r\n\r\n            // If anybody is attached to this entity or this type of entity\r\n            if (!!this.EntitySets[entityId] || !!this.EntitySets[msg.entityName]) {\r\n                \r\n                // This entity is not known to us yet, so just trying to fetch its state from server\r\n                setTimeout(() => this.fetchAndApplyEntityState(msg.entityName, msg.entityKey, msg.version, 0), this.RetryBaseIntervalMs);\r\n            }\r\n           \r\n        } else {\r\n\r\n            const expectedVersion = existingStateContainer.version + 1;\r\n            if (msg.version > expectedVersion) {\r\n                \r\n                // Missed some updates, so now need to reload the state from server\r\n                this.fetchAndApplyEntityState(msg.entityName, msg.entityKey, msg.version, 0, existingStateContainer.state);\r\n\r\n            } else if (msg.version === expectedVersion) {\r\n\r\n                // Applying the change\r\n                rfc6902.applyPatch(existingStateContainer.state, msg.stateDiff);\r\n                existingStateContainer.version = msg.version;\r\n            }            \r\n        }\r\n    }\r\n\r\n    private static entitySignalResponseHandler(msg: EntitySignalResponseMessage): void {\r\n\r\n        const responsePromise = this.SignalResultPromises[msg.correlationId];\r\n        if (!responsePromise) {\r\n            return;\r\n        }\r\n\r\n        if (!msg.errorMessage) {\r\n            responsePromise.resolve(msg.result);\r\n        } else {\r\n            responsePromise.reject(new Error(msg.errorMessage));\r\n        }\r\n\r\n        delete this.SignalResultPromises[msg.correlationId];\r\n    }\r\n\r\n    private static initSignalR(): void {\r\n\r\n        if (!!this.SignalRConn) {\r\n            return;\r\n        }\r\n\r\n        // Configuring SignalR\r\n        this.SignalRConn = new HubConnectionBuilder()\r\n            .withUrl(`${BackendBaseUri}`, { httpClient: this.HttpClient, logger: this.Config.logger })\r\n            .build();\r\n\r\n        // Mounting event handlers\r\n        this.SignalRConn.on(SignalRClientHandlerName, msg => this.entityStateChangedMessageHandler(msg));\r\n        this.SignalRConn.on(SignalRSignalResponseHandlerName, msg => this.entitySignalResponseHandler(msg));\r\n\r\n        // Background reconnects are essential here. That's because in 'Default' or 'Classic' service mode\r\n        // clients get forcibly disconnected, when your backend restarts.\r\n        this.SignalRConn.onclose(() => this.reconnectToSignalR());\r\n\r\n        // Establishing SignalR connection\r\n        this.SignalRConn.start().then(\r\n            () => {\r\n                this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: successfully connected to SignalR`);\r\n            }, err => {\r\n                this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to connect to SignalR: ${err}`);\r\n            });\r\n    }\r\n\r\n    private static reconnectToSignalR() {\r\n\r\n        this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: reconnecting to SignalR...`);\r\n        this.SignalRConn.start().then(() => {\r\n            this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: reconnected to SignalR`);\r\n        }, () => {\r\n            setTimeout(() => this.reconnectToSignalR(), this.SignalRReconnectIntervalInMs);\r\n        });\r\n    }\r\n\r\n    // Applies incoming changes to an existing observable object so, that UI is re-rendered\r\n    private static applyStateChangesFrom(currentEntityState: any, incomingEntityState: any): void {\r\n\r\n        // Need to preserve the entityKey field, if it is set\r\n        incomingEntityState.entityKey = currentEntityState.entityKey;\r\n\r\n        const diff = rfc6902.createPatch(currentEntityState, incomingEntityState);\r\n        rfc6902.applyPatch(currentEntityState, diff);\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport { autorun } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport * as atlas from 'azure-maps-control';\r\n\r\n// Visualizes geo coordinates with Azure Maps control\r\nexport const MapControl = observer(class MapControl extends React.Component<{ entityKey: string, dataSource: atlas.source.DataSource, bounds: atlas.data.BoundingBox, azureMapSubscriptionKey: string }> {\r\n\r\n    componentDidMount() {\r\n\r\n        var map = new atlas.Map(this.props.entityKey, {\r\n\r\n            style: \"road_shaded_relief\",\r\n            language: 'en-US',\r\n\r\n            authOptions: {\r\n                authType: atlas.AuthenticationType.subscriptionKey,\r\n                subscriptionKey: this.props.azureMapSubscriptionKey\r\n            }\r\n        });\r\n\r\n        map.events.add('ready', () => {\r\n\r\n            // Adding the zoom control\r\n            map.controls.add( [new atlas.control.ZoomControl() ], { position: atlas.ControlPosition.BottomRight } );\r\n\r\n            // Showing the dataSource with route line\r\n            map.sources.add(this.props.dataSource);\r\n\r\n            const layer = new atlas.layer.LineLayer(this.props.dataSource, undefined, {\r\n                strokeColor: 'DarkOrchid',\r\n                strokeWidth: 3\r\n            });\r\n            map.layers.add(layer);\r\n        });\r\n\r\n        // This will zoom the map to the bounding box of all points\r\n        autorun(() => {\r\n            map.setCamera({ bounds: this.props.bounds, padding: 40 });\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (<div id={this.props.entityKey} className=\"map-div\"/>);\r\n    }\r\n})","import React from 'react';\r\nimport { makeAutoObservable } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { AppBar, Button, Box, Grid, LinearProgress, List, ListItem, Paper, TextField, Toolbar, Typography } from '@material-ui/core';\r\nimport { AccountCircle } from '@material-ui/icons';\r\nimport { XYPlot, XAxis, YAxis, HorizontalBarSeries, DiscreteColorLegend, LineSeries } from 'react-vis';\r\nimport * as atlas from 'azure-maps-control';\r\n\r\nimport { DurableEntitySet } from './common/DurableEntitySet';\r\nimport { TrackerState } from './shared/TrackerState';\r\nimport { ITrackerParams } from './shared/ITrackerParams';\r\nimport { MapControl } from './MapControl';\r\n\r\n// This comes from server-side config settings and is being sent to us via proxy\r\ndeclare const AzureMapSubscriptionKey: string;\r\n\r\n// Setting up DurableEntitySet\r\nDurableEntitySet.setup({\r\n    logger: { log: (l, msg: string) => console.log(msg) },\r\n\r\n    fakeUserNamePromise: new Promise<string | null>((resolve) => {\r\n\r\n        // Trying to fetch current user name from server - this should work when deployed to Azure and EasyAuth properly configured\r\n        fetch('/.auth/me').then(r => r.json()).then(result => {\r\n\r\n            if (!result || !result.length) {\r\n                throw new Error('EasyAuth seems to be not configured. Falling back to a fake user name');\r\n            }\r\n\r\n            appState.userName = result[0].user_id;\r\n\r\n            // By returning null here we tell DurableEntitySet to proceed with using EasyAuth\r\n            resolve(null);\r\n\r\n        }).catch(() => {\r\n\r\n            // Asking the user for some fake user name. Obviously, we should never do it like that in production.\r\n            appState.userName = prompt('Enter your name:', 'Anonymous') as string;\r\n            resolve(appState.userName);\r\n        });\r\n    })\r\n});\r\n\r\n// App state container\r\nconst appState = makeAutoObservable({\r\n\r\n    // Here all tracker entities will appear\r\n    entities: new DurableEntitySet<TrackerState>('TrackerEntity', false),\r\n\r\n    userName: '',\r\n    nameText: '',\r\n    urlText: '',\r\n    queryText: '',\r\n    inProgress: true,\r\n\r\n    mapDataSources: {} as { [key: string]: atlas.source.DataSource }\r\n});\r\n\r\n// Triggering initial load and handling its finish\r\nappState.entities.attachAllEntities().finally(() => { appState.inProgress = false; });\r\n\r\n// Rendering that entity state\r\nexport const App = observer(\r\n    class App extends React.Component {\r\n\r\n        render(): JSX.Element {\r\n\r\n            const startTimes = appState.entities.items\r\n                .filter(i => !!i.points.length)\r\n                .map(i => new Date(i.points[0].time).getTime());\r\n            const minTime = Math.min(...startTimes);\r\n            \r\n            return (<>\r\n\r\n                <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                    <Toolbar>\r\n\r\n                        <TextField\r\n                            className=\"name-text\"\r\n                            label=\"Name\"\r\n                            placeholder=\"e.g. 'Temperature in Oslo'\"\r\n                            InputLabelProps={{ shrink: true }}\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            value={appState.nameText}\r\n                            disabled={appState.inProgress}\r\n                            onChange={(evt) => appState.nameText = evt.target.value as string}\r\n                        />\r\n\r\n                        <Box width={30} />\r\n\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"URL to track\"\r\n                            placeholder=\"e.g. 'https://api.openweathermap.org/data/2.5/weather?q=Oslo&appid={api-key}'\"\r\n                            InputLabelProps={{ shrink: true }}\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            value={appState.urlText}\r\n                            disabled={appState.inProgress}\r\n                            onChange={(evt) => appState.urlText = evt.target.value as string}\r\n                        />\r\n\r\n                        <Box width={30} />\r\n\r\n                        <TextField\r\n                            className=\"json-query-text\"\r\n                            label=\"(optional) JSON Query or Regular Expression\"\r\n                            placeholder=\"e.g. '$.main.temp'\"\r\n                            InputLabelProps={{ shrink: true }}\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            value={appState.queryText}\r\n                            disabled={appState.inProgress}\r\n                            onChange={(evt) => appState.queryText = evt.target.value as string}\r\n                        />\r\n\r\n                        <Box width={30} />\r\n\r\n                        <Button variant=\"contained\" color=\"default\" size=\"large\" className=\"new-entity-button\"\r\n                            disabled={!appState.nameText || !appState.urlText || appState.inProgress}\r\n                            onClick={() => this.createNewEntity()}\r\n                        >\r\n                            Track\r\n                        </Button>\r\n\r\n                        <Box width={40} />\r\n\r\n                        <AccountCircle />\r\n                        <Box width={5} />\r\n                        <Typography>{appState.userName}</Typography>\r\n\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {appState.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <List>\r\n\r\n                    {appState.entities.items.length === 0 && (\r\n                        <Typography variant=\"h5\" className=\"empty-list-placeholder\" >\r\n                            Nothing is tracked yet\r\n                        </Typography>\r\n                    )}\r\n\r\n                    {appState.entities.items.map(entity => {\r\n\r\n                        const lastValue = !!entity.points.length ? this.valueToString(entity.points[entity.points.length - 1].value) : '';\r\n\r\n                        return (<ListItem key={entity.entityKey}><Paper className=\"entity-paper\">\r\n\r\n                            <Grid container spacing={2}>\r\n\r\n                                <Grid item xs={2}>\r\n\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid item xs={12}><Typography variant=\"h6\">{entity.name}</Typography></Grid>\r\n\r\n                                        <Grid item xs={12}>\r\n                                            <TextField\r\n                                                label=\"Current Value\"\r\n                                                InputProps={{ readOnly: true }}\r\n                                                InputLabelProps={{ shrink: true }}\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                fullWidth\r\n                                                value={lastValue}\r\n                                            />\r\n                                        </Grid>\r\n                                        \r\n                                        <Grid item xs={6}>\r\n                                            <Button className=\"item-btn\" variant=\"contained\" color=\"default\" size=\"small\" disabled={appState.inProgress}\r\n                                                onClick={() => {\r\n                                                    appState.inProgress = true;\r\n                                                    appState.entities.callEntity(entity.entityKey, 'reset')\r\n                                                        .catch(err => alert(err.message))\r\n                                                        .finally(() => { appState.inProgress = false; });\r\n                                                }}\r\n                                            >\r\n                                                Reset\r\n                                            </Button>\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={6}>\r\n                                            <Button className=\"item-btn\" variant=\"contained\" color=\"default\" size=\"small\" disabled={appState.inProgress}\r\n                                                onClick={() => {\r\n                                                    appState.inProgress = true;\r\n                                                    appState.entities.callEntity(entity.entityKey, 'delete')\r\n                                                        .catch(err => alert(err.message))\r\n                                                        .finally(() => { appState.inProgress = false; });\r\n                                                }}\r\n                                            >\r\n                                                Delete\r\n                                            </Button>\r\n                                        </Grid>\r\n\r\n                                        {!!entity.error && (<Grid item xs={12}>\r\n                                            <Typography color=\"secondary\" variant=\"caption\">Error: {entity.error}</Typography>\r\n                                        </Grid>)}\r\n\r\n                                    </Grid>                               \r\n                                </Grid>\r\n\r\n                                <Grid item xs={10}>\r\n\r\n                                    {this.renderGraph(entity.entityKey, entity, minTime)}\r\n\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Paper></ListItem>); })\r\n                    }\r\n                </List>\r\n            </>);\r\n        }\r\n\r\n        private createNewEntity() {\r\n\r\n            // Deriving entityId from url + jsonPath\r\n            const entityId = btoa(appState.nameText + '-' + appState.urlText + '-' + appState.queryText)\r\n                .replaceAll('/', '-');\r\n\r\n            const params: ITrackerParams = {\r\n                name: appState.nameText,\r\n                url: appState.urlText,\r\n                query: appState.queryText\r\n            }\r\n\r\n            // Creating a new entity by calling its 'init' method \r\n            appState.inProgress = true;\r\n            appState.entities.callEntity(entityId, 'init', params)\r\n                .catch(err => alert(err.message))\r\n                .finally(() => { appState.inProgress = false; });\r\n\r\n            appState.nameText = '';\r\n            appState.urlText = '';\r\n            appState.queryText = '';\r\n        }\r\n\r\n        private renderGraph(entityKey: string, entity: TrackerState, minTime: number): JSX.Element {\r\n\r\n            const firstValue = !!entity.points.length ? entity.points[0].value : undefined;\r\n\r\n            // If values look like numbers, rendering as a line graph\r\n            if (!isNaN(firstValue)) {\r\n                return this.renderLineGraph(entity, minTime);\r\n            }\r\n\r\n            // If it is an array of two numbers, then treating them as coordinates and rendering on a map\r\n            if (this.isConfigSettingDefined(AzureMapSubscriptionKey) && Array.isArray(firstValue) && (firstValue.length === 2) && (!isNaN(firstValue[0])) && (!isNaN(firstValue[1]))) {\r\n                return this.renderMap(entityKey, entity);\r\n            }\r\n\r\n            // Rendering as horizontal bars\r\n            return this.renderHorizontalBars(entity, minTime);\r\n        }\r\n\r\n        private renderLineGraph(entity: TrackerState, minTime: number): JSX.Element {\r\n\r\n            const data = entity.points.map(p => { return { x: new Date(p.time).getTime(), y: Number(p.value) } });\r\n            const now = new Date().getTime();\r\n\r\n            // Adding last point to the end, to make the graph look continuous\r\n            if (entity.points.length > 0) {\r\n                data.push({ x: now, y: Number(entity.points[entity.points.length - 1].value) });\r\n            }\r\n\r\n            return (<XYPlot width={window.innerWidth - 350} height={200} stackBy=\"y\" xType=\"time\" xDomain={[minTime, now]} margin={{ left: 80 }}>\r\n\r\n                <XAxis tickTotal={7} />\r\n                <YAxis />\r\n                <LineSeries data={data} color={this.stringToColorCode(entity.name)} />\r\n\r\n            </XYPlot>);\r\n        }\r\n\r\n        private renderHorizontalBars(entity: TrackerState, minTime: number): JSX.Element {\r\n\r\n            const firstTime = !!entity.points.length ? new Date(entity.points[0].time).getTime() : minTime;\r\n            const now = new Date().getTime();\r\n\r\n            const points = entity.points.map((p, i) => {\r\n                const curTime = new Date(p.time).getTime();\r\n                const nextTime = (i < (entity.points.length - 1)) ? new Date(entity.points[i + 1].time).getTime() : now;\r\n\r\n                return { stringValue: this.valueToString(p.value), timeDiff: nextTime - curTime };\r\n            });\r\n\r\n            return (<>\r\n                <XYPlot width={window.innerWidth - 350} height={100} stackBy=\"x\" xType=\"time\" xDomain={[minTime, now]} margin={{ left: 80, top: 30 }}>\r\n\r\n                    <XAxis tickTotal={7} />\r\n\r\n                    <HorizontalBarSeries opacity={0} barWidth={1} data={[{ y: 0, x: firstTime }]} />\r\n\r\n                    {points.map(p => {\r\n                        return (<HorizontalBarSeries key={p.stringValue} color={this.stringToColorCode(p.stringValue)}\r\n                            barWidth={1} data={[{ y: 0, x: p.timeDiff }]}\r\n                        />);\r\n                    })}\r\n\r\n                </XYPlot>\r\n\r\n                <DiscreteColorLegend className=\"histogram-legend\"\r\n                    items={points.map(p => {\r\n                        return {\r\n                            title: p.stringValue.substr(0, 100),\r\n                            color: this.stringToColorCode(p.stringValue)\r\n                        };\r\n                    })}\r\n                    orientation=\"horizontal\"\r\n                />\r\n\r\n            </>);\r\n        }\r\n\r\n        private renderMap(entityKey: string, entity: TrackerState): JSX.Element {\r\n\r\n            const points = entity.points.map(p => p.value);\r\n\r\n            if (!appState.mapDataSources[entityKey]) {\r\n                appState.mapDataSources[entityKey] = new atlas.source.DataSource();\r\n            }\r\n\r\n            appState.mapDataSources[entityKey].clear();\r\n            appState.mapDataSources[entityKey].add(new atlas.data.Feature(new atlas.data.LineString(points)));\r\n\r\n            const bounds = atlas.data.BoundingBox.fromPositions(points);\r\n\r\n            return (<MapControl entityKey={entityKey} dataSource={appState.mapDataSources[entityKey]} bounds={bounds} azureMapSubscriptionKey={AzureMapSubscriptionKey} />);\r\n        }\r\n\r\n        private valueToString(val: any): string {\r\n\r\n            if (typeof val === 'string') {\r\n                return val;\r\n            }\r\n\r\n            if (!val) {\r\n                return 'null';\r\n            }\r\n\r\n            return JSON.stringify(val);\r\n        }\r\n\r\n        private stringToColorCode(str: string): string {\r\n\r\n            // Taking hash out of input string (reversed, to make names like 'func1', 'func2' etc. look different)\r\n            var hashCode = 0;\r\n            for (var i = str.length - 1; i >= 0; i--) {\r\n                hashCode = ((hashCode << 5) - hashCode) + str.charCodeAt(i);\r\n                // Convert to positive 32-bit integer\r\n                hashCode &= 0x7FFFFFFF;\r\n            }\r\n\r\n            // min 6 hex digits\r\n            hashCode |= 0x100000;\r\n\r\n            // Not too white\r\n            hashCode &= 0xFFFFEF;\r\n\r\n            return '#' + hashCode.toString(16);\r\n        }\r\n\r\n        private isConfigSettingDefined(value: string) {\r\n            return !!value && !(\r\n                value.startsWith('%') && value.endsWith('%') // if this parameter isn't specified in Config Settings, the proxy returns env variable name instead\r\n            );\r\n        }\r\n    }\r\n);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport '../node_modules/react-vis/dist/style.css';\r\nimport '../node_modules/azure-maps-control/dist/atlas.css';\r\n\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}