{"version":3,"sources":["shared/common/SignalRNotifications.ts","common/DurableHttpClient.ts","shared/common/Constants.ts","common/DurableEntitySet.ts","MapControl.tsx","App.tsx","index.tsx"],"names":["EntityStateChangedMessage","entityName","entityKey","version","stateDiff","isEntityDestructed","msg","FormatEntityId","BackendBaseUri","DurableHttpClient","_configFabric","NullLogger","instance","request","url","includes","config","this","accessTokenFactory","then","accessToken","headers","fakeUserNamePromise","fakeUserName","DefaultHttpClient","DurableEntitySet","_entityName","attachToAll","items","toLowerCase","makeObservable","observable","attachAllEntities","initSignalR","EntitySets","fetchAndApplyAllEntityStates","entityId","EntityStates","attachEntity","undefined","createEntity","signalName","argument","signalEntity","callEntity","metadata","updateEntityMetadata","initialState","state","makeAutoObservable","fetchAndApplyEntityState","uri","HttpClient","post","content","JSON","stringify","Promise","resolve","reject","response","correlationId","parse","SignalResultPromises","Config","logger","entityState","entitySet","push","i","length","splice","desiredVersion","retryCount","currentEntityState","get","stateContainer","Error","diff","rfc6902","entityAdded","catch","err","MaxRetryCount","setTimeout","RetryBaseIntervalMs","log","LogLevel","item","GetEntityId","Trace","entityDeleted","expectedVersion","responsePromise","errorMessage","result","SignalRConn","HubConnectionBuilder","withUrl","httpClient","build","on","entityStateChangedMessageHandler","entitySignalResponseHandler","onclose","tryToReconnect","Information","start","SignalRReconnectIntervalInMs","MapControl","observer","map","atlas","props","style","language","authOptions","authType","subscriptionKey","azureMapSubscriptionKey","events","add","controls","ZoomControl","position","BottomRight","sources","dataSource","layer","LineLayer","strokeColor","strokeWidth","layers","autorun","setCamera","bounds","padding","id","className","React","setup","l","console","fetch","r","json","appState","userName","user_id","prompt","entities","nameText","urlText","queryText","inProgress","mapDataSources","App","startTimes","filter","points","Date","time","getTime","minTime","Math","min","AppBar","color","Toolbar","TextField","label","placeholder","InputLabelProps","shrink","variant","size","value","disabled","onChange","evt","target","Box","width","fullWidth","Button","onClick","createNewEntity","AccountCircle","Typography","LinearProgress","height","List","entity","ListItem","Paper","Grid","container","spacing","xs","name","error","alert","message","finally","renderGraph","replaceAll","params","query","firstValue","isNaN","isConfigSettingDefined","AzureMapSubscriptionKey","Array","isArray","renderMap","renderHorizontalBars","renderLineGraph","data","p","x","y","Number","now","utcNow","getTimezoneOffset","window","innerWidth","stackBy","xType","xDomain","margin","left","tickTotal","stringToColorCode","firstTime","curTime","nextTime","stringValue","valueToString","timeDiff","top","opacity","barWidth","title","substr","orientation","DataSource","clear","Feature","LineString","BoundingBox","fromPositions","val","str","hashCode","charCodeAt","toString","startsWith","endsWith","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2267103.chunk.js","sourcesContent":["import * as rfc6902 from 'rfc6902';\r\n\r\nexport class EntityStateChangedMessage {\r\n    \r\n    entityName: string = '';\r\n    entityKey: string = '';\r\n    version: number = 0;\r\n    stateDiff: rfc6902.Operation[] = [];\r\n    isEntityDestructed: boolean = false;\r\n\r\n    static GetEntityId(msg: EntityStateChangedMessage): string {\r\n        return EntityStateChangedMessage.FormatEntityId(msg.entityName, msg.entityKey);\r\n    }\r\n\r\n    static FormatEntityId(entityName: string, entityKey: string): string {\r\n        return `@${entityName}@${entityKey}`;\r\n    }\r\n}\r\n\r\nexport class EntitySignalResponseMessage {\r\n\r\n    entityName: string = '';\r\n    entityKey: string = '';\r\n    correlationId: string = '';\r\n    result: any;\r\n    errorMessage: string = '';\r\n}","import { DefaultHttpClient, HttpRequest, HttpResponse, NullLogger } from '@aspnet/signalr';\r\n\r\nimport { IDurableEntitySetConfig } from './IDurableEntitySetConfig';\r\nimport { ClientPrincipalHeaderName } from '../shared/common/Constants';\r\n\r\nexport const BackendBaseUri = '/a/p/i';\r\n\r\n// Custom HttpClient implementation for the purposes of DurableEntitySet\r\nexport class DurableHttpClient extends DefaultHttpClient {\r\n\r\n    constructor(private _configFabric: () => IDurableEntitySetConfig) {\r\n        super(NullLogger.instance);\r\n    }\r\n\r\n    send(request: HttpRequest): Promise<HttpResponse> {\r\n\r\n        // Applying custom config settings, but only when calling our backend\r\n\r\n        if (request.url!.includes(BackendBaseUri)) {\r\n\r\n            const config = this._configFabric();\r\n\r\n            if (!!config.accessTokenFactory) {\r\n                return config.accessTokenFactory().then(accessToken => {\r\n\r\n                    request.headers = {}\r\n                    request.headers['Authorization'] = 'Bearer ' + accessToken;\r\n\r\n                    return super.send(request);\r\n                });\r\n            }\r\n\r\n            if (!!config.fakeUserNamePromise) {\r\n                return config.fakeUserNamePromise.then(fakeUserName => {\r\n\r\n                    if (!!fakeUserName) {\r\n                        request.headers = {}\r\n                        request.headers[ClientPrincipalHeaderName] = fakeUserName;\r\n                    }\r\n\r\n                    return super.send(request);\r\n                });\r\n            }\r\n        }\r\n\r\n        return super.send(request);\r\n    }\r\n}\r\n","\r\nexport const SignalRClientHandlerName = \"entity-state-changed\";\r\n\r\nexport const SignalRSignalResponseHandlerName = \"entity-signal-response\";\r\n\r\nexport const ClientPrincipalHeaderName = 'x-ms-client-principal-name';\r\n\r\nexport const UpdateMetadataServiceMethodName = \"$update-entity-internal-metadata\";\r\n","import { makeAutoObservable, makeObservable, observable } from 'mobx';\r\nimport { HubConnectionBuilder, HubConnection, NullLogger, LogLevel } from '@aspnet/signalr';\r\nimport * as rfc6902 from 'rfc6902';\r\n\r\nimport { ISetEntityMetadataRequest } from '../shared/common/ISetEntityMetadataRequest';\r\nimport { EntityStateChangedMessage, EntitySignalResponseMessage } from '../shared/common/SignalRNotifications';\r\nimport { SignalRClientHandlerName, SignalRSignalResponseHandlerName, UpdateMetadataServiceMethodName } from '../shared/common/Constants';\r\nimport { DurableEntityClientStateContainer } from '../shared/common/DurableEntityClientStateContainer';\r\nimport { IDurableEntitySetConfig } from './IDurableEntitySetConfig';\r\nimport { DurableHttpClient, BackendBaseUri } from './DurableHttpClient';\r\n\r\nexport type EntityStateWithKey = { entityKey: string };\r\n\r\n// Client-side container for Durable Entities\r\nexport class DurableEntitySet<TState extends object> {\r\n\r\n    // All attached entities will appear in this observable array\r\n    items: (TState & EntityStateWithKey)[] = [];\r\n    \r\n    constructor(private _entityName: string, attachToAll: boolean = true) {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        this._entityName = this._entityName.toLowerCase();\r\n\r\n        makeObservable(this, { items: observable });\r\n        \r\n        if (attachToAll) {\r\n            this.attachAllEntities();\r\n        }\r\n    }\r\n\r\n    // Attach all entities of this type (that type you previously passed to ctor).\r\n    // Preloads all existing entities of this type and then automatically captures all newly created entities.\r\n    attachAllEntities(): void {\r\n\r\n        DurableEntitySet.initSignalR();\r\n\r\n        // Registering ourselves as listeners for this type of entity\r\n        DurableEntitySet.EntitySets[this._entityName] = this.items;\r\n\r\n        // Loading all existing entities\r\n        DurableEntitySet.fetchAndApplyAllEntityStates(this._entityName);\r\n    }\r\n\r\n    // Manually attach a single entity with specific key\r\n    attachEntity(entityKey: string): void {\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(this._entityName, entityKey);\r\n\r\n        if (!!DurableEntitySet.EntityStates[entityId]) {\r\n            return;\r\n        }\r\n\r\n        // Registering ourselves as listeners for this particular entity\r\n        DurableEntitySet.EntitySets[entityId] = this.items;\r\n        \r\n        DurableEntitySet.attachEntity(this._entityName, entityKey, undefined as any);\r\n    }\r\n\r\n    // Creates (or fetches existing) an entity\r\n    createEntity(entityKey: string): void {\r\n\r\n        DurableEntitySet.createEntity(this._entityName, entityKey, undefined as any);\r\n    }\r\n\r\n    // Sends a signal to the given entity\r\n    signalEntity(entityKey: string, signalName: string, argument?: any): Promise<void> {\r\n\r\n        return DurableEntitySet.signalEntity(this._entityName, entityKey, signalName, argument);\r\n    }\r\n\r\n    // Sends a signal to the given entity and returns a promise with results\r\n    callEntity(entityKey: string, signalName: string, argument?: any): Promise<any> {\r\n\r\n        return DurableEntitySet.callEntity(this._entityName, entityKey, signalName, argument);\r\n    }\r\n\r\n    // Updates metadata of the given entity\r\n    updateEntityMetadata(entityKey: string, metadata: ISetEntityMetadataRequest): Promise<void> {\r\n\r\n        return DurableEntitySet.updateEntityMetadata(this._entityName, entityKey, metadata);\r\n    }\r\n\r\n    // Produces a single observable state instance for an existing entity\r\n    static attachEntity<TState extends object>(entityName: string, entityKey: string, initialState: TState): TState {\r\n\r\n        DurableEntitySet.initSignalR();\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        entityName = entityName.toLowerCase();\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(entityName, entityKey);\r\n        if (!!this.EntityStates[entityId]) {\r\n            // If it is a known entity, then just returning it\r\n            return this.EntityStates[entityId].state as TState;\r\n        }\r\n\r\n        if (!!initialState) {\r\n            makeAutoObservable(initialState);\r\n        }\r\n\r\n        // Try to asynchronously retrieve the state from server\r\n        this.fetchAndApplyEntityState(entityName, entityKey, 0, 0, initialState);\r\n\r\n        return initialState;\r\n    }\r\n\r\n    // Creates (or fetches existing) and produces a single observable state instance for a newly created entity\r\n    static createEntity<TState extends object>(entityName: string, entityKey: string, initialState: TState): TState {\r\n\r\n        // This empty request will create the entity, if it doesn't exist yet.\r\n        this.updateEntityMetadata(entityName, entityKey, {});\r\n\r\n        return this.attachEntity(entityName, entityKey, initialState);\r\n    }\r\n\r\n    // Sends a signal to the given entity\r\n    static signalEntity(entityName: string, entityKey: string, signalName: string, argument?: any): Promise<void> {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        entityName = entityName.toLowerCase();\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityName}/${entityKey}/${signalName}`;\r\n        return this.HttpClient.post(uri, { content: JSON.stringify(argument) }).then();\r\n    }\r\n\r\n    // Sends a signal to the given entity and returns a promise with results\r\n    static callEntity(entityName: string, entityKey: string, signalName: string, argument?: any): Promise<any> {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        entityName = entityName.toLowerCase();\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityName}/${entityKey}/${signalName}`;\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this.HttpClient.post(uri, { content: JSON.stringify(argument) }).then(response => {\r\n\r\n                const correlationId: string = JSON.parse(response.content as string).correlationId;\r\n                this.SignalResultPromises[correlationId] = { resolve, reject };\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    // Updates metadata of the given entity\r\n    static updateEntityMetadata(entityName: string, entityKey: string, metadata: ISetEntityMetadataRequest): Promise<void> {\r\n\r\n        return this.signalEntity(entityName, entityKey, UpdateMetadataServiceMethodName, metadata);\r\n    }\r\n\r\n    // Optionally setup with these optional settings\r\n    static setup(config: IDurableEntitySetConfig): void {\r\n        this.Config = config;\r\n        if (!this.Config.logger) {\r\n            this.Config.logger = NullLogger.instance;\r\n        }\r\n    }\r\n\r\n    private static Config: IDurableEntitySetConfig = { logger: NullLogger.instance };\r\n    private static HttpClient: DurableHttpClient = new DurableHttpClient(() => DurableEntitySet.Config);\r\n\r\n    private static EntitySets: { [entityName: string]: EntityStateWithKey[] } = {};\r\n    private static EntityStates: { [entityId: string]: DurableEntityClientStateContainer } = {};\r\n    private static SignalResultPromises: { [correlationId: string]: { resolve: (res: any) => void, reject: (err: Error) => void } } = {};\r\n\r\n    private static SignalRConn: HubConnection;\r\n\r\n    private static readonly SignalRReconnectIntervalInMs = 5000;\r\n    private static readonly MaxRetryCount = 6;\r\n    private static readonly RetryBaseIntervalMs = 500;\r\n\r\n    private static entityAdded(entityName: string, entityKey: string, entityState: EntityStateWithKey) {\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(entityName, entityKey);\r\n\r\n        // Searching for entitySet either for this particular entity or for this type of entity\r\n        var entitySet = this.EntitySets[entityId];\r\n        if (!entitySet) {\r\n            entitySet = this.EntitySets[entityName];\r\n        } else {\r\n            delete this.EntitySets[entityId];\r\n        }\r\n\r\n        if (!entitySet) {\r\n            return;\r\n        }\r\n\r\n        // Adding the entityKey property to the state object, to allow binding commands\r\n        entityState.entityKey = entityKey;\r\n        entitySet.push(entityState);\r\n    }\r\n\r\n    private static entityDeleted(entityName: string, entityKey: string) {\r\n\r\n        const entitySet = this.EntitySets[entityName];\r\n        if (!entitySet) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < entitySet.length; i++) {\r\n\r\n            if (entitySet[i].entityKey === entityKey) {\r\n                entitySet.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static fetchAndApplyEntityState(entityName: string, entityKey: string, desiredVersion: number, retryCount: number, currentEntityState: any = null): void {\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityName}/${entityKey}`;\r\n        this.HttpClient.get(uri).then(response => {\r\n\r\n            const stateContainer = JSON.parse(response.content as string) as DurableEntityClientStateContainer;\r\n            const entityId = EntityStateChangedMessage.FormatEntityId(entityName, entityKey);\r\n\r\n            if (!!desiredVersion && (stateContainer.version < desiredVersion)) {\r\n                throw new Error(`Expected ${entityId} of version ${desiredVersion}, but got version ${stateContainer.version}`);\r\n            }\r\n\r\n            if (!currentEntityState) {\r\n\r\n                // If there is no existing state, then using the newly arrived state object\r\n                currentEntityState = stateContainer.state;\r\n                makeAutoObservable(currentEntityState);\r\n                \r\n            } else {\r\n\r\n                // Otherwise applying the change to the existing object, so that UI is re-rendered\r\n                (stateContainer.state as any).entityKey = currentEntityState.entityKey; // Need to preserve the entityKey field, if it is set\r\n                const diff = rfc6902.createPatch(currentEntityState, stateContainer.state);\r\n                rfc6902.applyPatch(currentEntityState, diff);\r\n            }\r\n\r\n            if (!this.EntityStates[entityId]) {\r\n                \r\n                // Adding the newly-arrived state into collections, if any\r\n                this.entityAdded(entityName, entityKey, currentEntityState);\r\n            }\r\n\r\n            // (Re)registering this entity\r\n            this.EntityStates[entityId] = { state: currentEntityState, version: stateContainer.version };\r\n\r\n        }).catch(err => {\r\n\r\n            if (retryCount < this.MaxRetryCount) {\r\n\r\n                // Retrying\r\n                retryCount++;\r\n                setTimeout(() => {\r\n\r\n                    this.fetchAndApplyEntityState(entityName, entityKey, desiredVersion, retryCount, currentEntityState);\r\n\r\n                }, retryCount * this.RetryBaseIntervalMs);\r\n                \r\n            } else {\r\n\r\n                this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to fetch entity state: ${err}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    private static fetchAndApplyAllEntityStates(entityName: string): void {\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityName}`;\r\n        this.HttpClient.get(uri).then(response => {\r\n\r\n            for (var item of JSON.parse(response.content as string)) {\r\n\r\n                const entityKey = item.entityKey;\r\n                const entityId = EntityStateChangedMessage.FormatEntityId(entityName, entityKey);\r\n                const stateContainer = item as DurableEntityClientStateContainer;\r\n\r\n                makeAutoObservable(stateContainer.state);\r\n                this.EntityStates[entityId] = stateContainer;\r\n\r\n                // Adding the newly-arrived state into collections, if any\r\n                this.entityAdded(entityName, entityKey, stateContainer.state as any);\r\n            }\r\n\r\n        }).catch(err => {\r\n            this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to fetch entity states: ${err}`);\r\n        });\r\n    }\r\n\r\n    private static entityStateChangedMessageHandler(msg: EntityStateChangedMessage): void {\r\n\r\n        const entityId = EntityStateChangedMessage.GetEntityId(msg);\r\n\r\n        this.Config.logger!.log(LogLevel.Trace, `DurableEntitySet: ${entityId} changed to version ${msg.version}`);\r\n\r\n        if (msg.isEntityDestructed) {\r\n\r\n            delete this.EntityStates[entityId];\r\n\r\n            this.entityDeleted(msg.entityName, msg.entityKey);\r\n\r\n        } else if (!this.EntityStates[entityId]) {\r\n\r\n            // If anybody is attached to this entity or this type of entity\r\n            if (!!this.EntitySets[entityId] || !!this.EntitySets[msg.entityName]) {\r\n                \r\n                // This entity is not known to us yet, so just trying to fetch its state from server\r\n                setTimeout(() => this.fetchAndApplyEntityState(msg.entityName, msg.entityKey, msg.version, 0), this.RetryBaseIntervalMs);\r\n            }\r\n           \r\n        } else {\r\n\r\n            const expectedVersion = this.EntityStates[entityId].version + 1;\r\n            if (msg.version > expectedVersion) {\r\n                \r\n                // Missed some updates, so now need to reload the state from server\r\n                this.fetchAndApplyEntityState(msg.entityName, msg.entityKey, msg.version, 0, this.EntityStates[entityId].state);\r\n\r\n            } else if (msg.version === expectedVersion) {\r\n\r\n                // Applying the change\r\n                rfc6902.applyPatch(this.EntityStates[entityId].state, msg.stateDiff);\r\n                this.EntityStates[entityId].version = msg.version;\r\n            }            \r\n        }\r\n    }\r\n\r\n    private static entitySignalResponseHandler(msg: EntitySignalResponseMessage): void {\r\n\r\n        const responsePromise = this.SignalResultPromises[msg.correlationId];\r\n        if (!responsePromise) {\r\n            return;\r\n        }\r\n\r\n        if (!msg.errorMessage) {\r\n            responsePromise.resolve(msg.result);\r\n        } else {\r\n            responsePromise.reject(new Error(msg.errorMessage));\r\n        }\r\n\r\n        delete this.SignalResultPromises[msg.correlationId];\r\n    }\r\n\r\n    private static initSignalR(): void {\r\n\r\n        if (!!this.SignalRConn) {\r\n            return;\r\n        }\r\n\r\n        // Configuring SignalR\r\n        this.SignalRConn = new HubConnectionBuilder()\r\n            .withUrl(`${BackendBaseUri}`, { httpClient: this.HttpClient, logger: this.Config.logger })\r\n            .build();\r\n\r\n        // Mounting event handlers\r\n        this.SignalRConn.on(SignalRClientHandlerName, msg => this.entityStateChangedMessageHandler(msg));\r\n        this.SignalRConn.on(SignalRSignalResponseHandlerName, msg => this.entitySignalResponseHandler(msg));\r\n\r\n        // Background reconnects are essential here. That's because in 'Default' or 'Classic' service mode\r\n        // clients get forcibly disconnected, when your backend restarts.\r\n        this.SignalRConn.onclose(() => {\r\n            var tryToReconnect = () => {\r\n                this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: reconnecting to SignalR...`);\r\n                this.SignalRConn.start().then(() => {\r\n                    this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: reconnected to SignalR`);\r\n                }, () => {\r\n                    setTimeout(tryToReconnect, this.SignalRReconnectIntervalInMs);\r\n                })\r\n            }\r\n            tryToReconnect();\r\n        });\r\n\r\n        // Establishing SignalR connection\r\n        this.SignalRConn.start().then(\r\n            () => {\r\n                this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: successfully connected to SignalR`);\r\n            }, err => {\r\n                this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to connect to SignalR: ${err}`);\r\n            });\r\n    }\r\n}","import * as React from 'react';\r\nimport { autorun } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport * as atlas from 'azure-maps-control';\r\n\r\n// Visualizes geo coordinates with Azure Maps control\r\nexport const MapControl = observer(class MapControl extends React.Component<{ entityKey: string, dataSource: atlas.source.DataSource, bounds: atlas.data.BoundingBox, azureMapSubscriptionKey: string }> {\r\n\r\n    componentDidMount() {\r\n\r\n        var map = new atlas.Map(this.props.entityKey, {\r\n\r\n            style: \"road_shaded_relief\",\r\n            language: 'en-US',\r\n\r\n            authOptions: {\r\n                authType: atlas.AuthenticationType.subscriptionKey,\r\n                subscriptionKey: this.props.azureMapSubscriptionKey\r\n            }\r\n        });\r\n\r\n        map.events.add('ready', () => {\r\n\r\n            // Adding the zoom control\r\n            map.controls.add( [new atlas.control.ZoomControl() ], { position: atlas.ControlPosition.BottomRight } );\r\n\r\n            // Showing the dataSource with route line\r\n            map.sources.add(this.props.dataSource);\r\n\r\n            const layer = new atlas.layer.LineLayer(this.props.dataSource, undefined, {\r\n                strokeColor: 'DarkOrchid',\r\n                strokeWidth: 3\r\n            });\r\n            map.layers.add(layer);\r\n        });\r\n\r\n        // This will zoom the map to the bounding box of all points\r\n        autorun(() => {\r\n            map.setCamera({ bounds: this.props.bounds, padding: 40 });\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (<div id={this.props.entityKey} className=\"map-div\"/>);\r\n    }\r\n})","import React from 'react';\r\nimport { makeAutoObservable } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { AppBar, Button, Box, Grid, LinearProgress, List, ListItem, Paper, TextField, Toolbar, Typography } from '@material-ui/core';\r\nimport { AccountCircle } from '@material-ui/icons';\r\nimport { XYPlot, XAxis, YAxis, HorizontalBarSeries, DiscreteColorLegend, LineSeries } from 'react-vis';\r\nimport * as atlas from 'azure-maps-control';\r\n\r\nimport { DurableEntitySet } from './common/DurableEntitySet';\r\nimport { TrackerState } from './shared/TrackerState';\r\nimport { ITrackerParams } from './shared/ITrackerParams';\r\nimport { MapControl } from './MapControl';\r\n\r\n// This comes from server-side config settings and is being sent to us via proxy\r\ndeclare const AzureMapSubscriptionKey: string;\r\n\r\n// Setting up DurableEntitySet\r\nDurableEntitySet.setup({\r\n    logger: { log: (l, msg: string) => console.log(msg) },\r\n\r\n    fakeUserNamePromise: new Promise<string | null>((resolve) => {\r\n\r\n        // Trying to fetch current user name from server - this should work when deployed to Azure and EasyAuth properly configured\r\n        fetch('/.auth/me').then(r => r.json()).then(result => {\r\n\r\n            if (!result || !result.length) {\r\n                throw new Error('EasyAuth seems to be not configured. Falling back to a fake user name');\r\n            }\r\n\r\n            appState.userName = result[0].user_id;\r\n\r\n            // By returning null here we tell DurableEntitySet to proceed with using EasyAuth\r\n            resolve(null);\r\n\r\n        }).catch(() => {\r\n\r\n            // Asking the user for some fake user name. Obviously, we should never do it like that in production.\r\n            appState.userName = prompt('Enter your name:', 'Anonymous') as string;\r\n            resolve(appState.userName);\r\n        });\r\n    })\r\n});\r\n\r\n// App state container\r\nconst appState = makeAutoObservable({\r\n\r\n    // Here all tracker entities will appear\r\n    entities: new DurableEntitySet<TrackerState>('TrackerEntity'),\r\n\r\n    userName: '',\r\n    nameText: '',\r\n    urlText: '',\r\n    queryText: '',\r\n    inProgress: false,\r\n\r\n    mapDataSources: {} as { [key: string]: atlas.source.DataSource }\r\n});\r\n\r\n// Rendering that entity state\r\nexport const App = observer(\r\n    class App extends React.Component {\r\n\r\n        render(): JSX.Element {\r\n\r\n            const startTimes = appState.entities.items\r\n                .filter(i => !!i.points.length)\r\n                .map(i => new Date(i.points[0].time).getTime());\r\n            const minTime = Math.min(...startTimes);\r\n            \r\n            return (<>\r\n\r\n                <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                    <Toolbar>\r\n\r\n                        <TextField\r\n                            className=\"name-text\"\r\n                            label=\"Name\"\r\n                            placeholder=\"e.g. 'Temperature in Oslo'\"\r\n                            InputLabelProps={{ shrink: true }}\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            value={appState.nameText}\r\n                            disabled={appState.inProgress}\r\n                            onChange={(evt) => appState.nameText = evt.target.value as string}\r\n                        />\r\n\r\n                        <Box width={30} />\r\n\r\n                        <TextField\r\n                            fullWidth\r\n                            label=\"URL to track\"\r\n                            placeholder=\"e.g. 'https://api.openweathermap.org/data/2.5/weather?q=Oslo&appid={api-key}'\"\r\n                            InputLabelProps={{ shrink: true }}\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            value={appState.urlText}\r\n                            disabled={appState.inProgress}\r\n                            onChange={(evt) => appState.urlText = evt.target.value as string}\r\n                        />\r\n\r\n                        <Box width={30} />\r\n\r\n                        <TextField\r\n                            className=\"json-query-text\"\r\n                            label=\"(optional) JSON Query or Regular Expression\"\r\n                            placeholder=\"e.g. '$.main.temp'\"\r\n                            InputLabelProps={{ shrink: true }}\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            value={appState.queryText}\r\n                            disabled={appState.inProgress}\r\n                            onChange={(evt) => appState.queryText = evt.target.value as string}\r\n                        />\r\n\r\n                        <Box width={30} />\r\n\r\n                        <Button variant=\"contained\" color=\"default\" size=\"large\" className=\"new-entity-button\"\r\n                            disabled={!appState.nameText || !appState.urlText || appState.inProgress}\r\n                            onClick={() => this.createNewEntity()}\r\n                        >\r\n                            Track\r\n                        </Button>\r\n\r\n                        <Box width={40} />\r\n\r\n                        <AccountCircle />\r\n                        <Box width={5} />\r\n                        <Typography>{appState.userName}</Typography>\r\n\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                {appState.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n                <List>\r\n\r\n                    {appState.entities.items.length === 0 && (\r\n                        <Typography variant=\"h5\" className=\"empty-list-placeholder\" >\r\n                            Nothing is tracked yet\r\n                        </Typography>\r\n                    )}\r\n\r\n                    {appState.entities.items.map(entity => {\r\n\r\n                        return (<ListItem key={entity.entityKey}><Paper className=\"entity-paper\">\r\n\r\n                            <Grid container spacing={2}>\r\n\r\n                                <Grid item xs={2}>\r\n\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid item xs={12}><Typography variant=\"h6\">{entity.name}</Typography></Grid>\r\n\r\n                                        {!!entity.error ? (<>\r\n                                            <Grid item xs={12}><Typography color=\"secondary\" variant=\"caption\">Error: {entity.error}</Typography></Grid>\r\n                                        </>) : (<>\r\n                                        </>)}\r\n\r\n                                        <Grid item xs={6}>\r\n                                            <Button className=\"item-btn\" variant=\"contained\" color=\"default\" size=\"small\" disabled={appState.inProgress}\r\n                                                onClick={() => {\r\n                                                    appState.inProgress = true;\r\n                                                    appState.entities.callEntity(entity.entityKey, 'reset')\r\n                                                        .catch(err => alert(err.message))\r\n                                                        .finally(() => { appState.inProgress = false; });\r\n                                                }}\r\n                                            >\r\n                                                Reset\r\n                                        </Button>\r\n                                        </Grid>\r\n                                        <Grid item xs={6}>\r\n                                            <Button className=\"item-btn\" variant=\"contained\" color=\"default\" size=\"small\" disabled={appState.inProgress}\r\n                                                onClick={() => {\r\n                                                    appState.inProgress = true;\r\n                                                    appState.entities.callEntity(entity.entityKey, 'delete')\r\n                                                        .catch(err => alert(err.message))\r\n                                                        .finally(() => { appState.inProgress = false; });\r\n                                                }}\r\n                                            >\r\n                                                Delete\r\n                                        </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                \r\n                                </Grid>\r\n\r\n                                <Grid item xs={10}>\r\n\r\n                                    {this.renderGraph(entity.entityKey, entity, minTime)}\r\n\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Paper></ListItem>); })\r\n                    }\r\n                </List>\r\n            </>);\r\n        }\r\n\r\n        private createNewEntity() {\r\n\r\n            // Deriving entityId from url + jsonPath\r\n            const entityId = (appState.nameText + '-' + appState.urlText + '-' + appState.queryText)\r\n                .replaceAll('\"', '-')\r\n                .replaceAll('\\'', '-')\r\n                .replaceAll('/', '-')\r\n                .replaceAll('\\\\', '-')\r\n                .replaceAll('#', '-')\r\n                .replaceAll('?', '-');\r\n\r\n            const params: ITrackerParams = {\r\n                name: appState.nameText,\r\n                url: appState.urlText,\r\n                query: appState.queryText\r\n            }\r\n\r\n            // Creating a new entity by calling its 'init' method \r\n            appState.inProgress = true;\r\n            appState.entities.callEntity(entityId, 'init', params)\r\n                .catch(err => alert(err.message))\r\n                .finally(() => { appState.inProgress = false; });\r\n\r\n            appState.nameText = '';\r\n            appState.urlText = '';\r\n            appState.queryText = '';\r\n        }\r\n\r\n        private renderGraph(entityKey: string, entity: TrackerState, minTime: number): JSX.Element {\r\n\r\n            const firstValue = !!entity.points.length ? entity.points[0].value : undefined;\r\n\r\n            // If values look like numbers, rendering as a line graph\r\n            if (!isNaN(firstValue)) {\r\n                return this.renderLineGraph(entity, minTime);\r\n            }\r\n\r\n            // If it is an array of two numbers, then treating them as coordinates and rendering on a map\r\n            if (this.isConfigSettingDefined(AzureMapSubscriptionKey) && Array.isArray(firstValue) && (firstValue.length === 2) && (!isNaN(firstValue[0])) && (!isNaN(firstValue[1]))) {\r\n                return this.renderMap(entityKey, entity);\r\n            }\r\n\r\n            // Rendering as horizontal bars\r\n            return this.renderHorizontalBars(entity, minTime);\r\n        }\r\n\r\n        private renderLineGraph(entity: TrackerState, minTime: number): JSX.Element {\r\n\r\n            const data = entity.points.map(p => { return { x: new Date(p.time).getTime(), y: Number(p.value) } });\r\n\r\n            const now = new Date();\r\n            const utcNow = now.getTime() + now.getTimezoneOffset() * 60000;\r\n\r\n            // Adding last point to the end, to make the graph look continuous\r\n            if (entity.points.length > 0) {\r\n                data.push({ x: utcNow, y: Number(entity.points[entity.points.length - 1].value) });\r\n            }\r\n\r\n            return (<XYPlot width={window.innerWidth - 300} height={200} stackBy=\"y\" xType=\"time\" xDomain={[minTime, utcNow]} margin={{ left: 80 }}>\r\n\r\n                <XAxis tickTotal={7} />\r\n                <YAxis />\r\n                <LineSeries data={data} color={this.stringToColorCode(entity.name)} />\r\n\r\n            </XYPlot>);\r\n        }\r\n\r\n        private renderHorizontalBars(entity: TrackerState, minTime: number): JSX.Element {\r\n\r\n            const firstTime = !!entity.points.length ? new Date(entity.points[0].time).getTime() : minTime;\r\n\r\n            const now = new Date();\r\n            const utcNow = now.getTime() + now.getTimezoneOffset() * 60000;\r\n\r\n            const points = entity.points.map((p, i) => {\r\n                const curTime = new Date(p.time).getTime();\r\n                const nextTime = (i < (entity.points.length - 1)) ? new Date(entity.points[i + 1].time).getTime() : utcNow;\r\n\r\n                return { stringValue: this.valueToString(p.value), timeDiff: nextTime - curTime };\r\n            });\r\n\r\n            return (<>\r\n                <XYPlot width={window.innerWidth - 300} height={100} stackBy=\"x\" xType=\"time\" xDomain={[minTime, utcNow]} margin={{ left: 80, top: 30 }}>\r\n\r\n                    <XAxis tickTotal={7} />\r\n\r\n                    <HorizontalBarSeries opacity={0} barWidth={1} data={[{ y: 0, x: firstTime }]} />\r\n\r\n                    {points.map(p => {\r\n                        return (<HorizontalBarSeries key={p.stringValue} color={this.stringToColorCode(p.stringValue)}\r\n                            barWidth={1} data={[{ y: 0, x: p.timeDiff }]}\r\n                        />);\r\n                    })}\r\n\r\n                </XYPlot>\r\n\r\n                <DiscreteColorLegend className=\"histogram-legend\"\r\n                    items={points.map(p => {\r\n                        return {\r\n                            title: p.stringValue.substr(0, 100),\r\n                            color: this.stringToColorCode(p.stringValue)\r\n                        };\r\n                    })}\r\n                    orientation=\"horizontal\"\r\n                />\r\n\r\n            </>);\r\n        }\r\n\r\n        private renderMap(entityKey: string, entity: TrackerState): JSX.Element {\r\n\r\n            const points = entity.points.map(p => p.value);\r\n\r\n            if (!appState.mapDataSources[entityKey]) {\r\n                appState.mapDataSources[entityKey] = new atlas.source.DataSource();\r\n            }\r\n\r\n            appState.mapDataSources[entityKey].clear();\r\n            appState.mapDataSources[entityKey].add(new atlas.data.Feature(new atlas.data.LineString(points)));\r\n\r\n            const bounds = atlas.data.BoundingBox.fromPositions(points);\r\n\r\n            return (<MapControl entityKey={entityKey} dataSource={appState.mapDataSources[entityKey]} bounds={bounds} azureMapSubscriptionKey={AzureMapSubscriptionKey} />);\r\n        }\r\n\r\n        private valueToString(val: any): string {\r\n\r\n            if (typeof val === 'string') {\r\n                return val;\r\n            }\r\n\r\n            if (!val) {\r\n                return 'null';\r\n            }\r\n\r\n            return JSON.stringify(val);\r\n        }\r\n\r\n        private stringToColorCode(str: string): string {\r\n\r\n            // Taking hash out of input string (reversed, to make names like 'func1', 'func2' etc. look different)\r\n            var hashCode = 0;\r\n            for (var i = str.length - 1; i >= 0; i--) {\r\n                hashCode = ((hashCode << 5) - hashCode) + str.charCodeAt(i);\r\n                // Convert to positive 32-bit integer\r\n                hashCode &= 0x7FFFFFFF;\r\n            }\r\n\r\n            // min 6 hex digits\r\n            hashCode |= 0x100000;\r\n\r\n            // Not too white\r\n            hashCode &= 0xFFFFEF;\r\n\r\n            return '#' + hashCode.toString(16);\r\n        }\r\n\r\n        private isConfigSettingDefined(value: string) {\r\n            return !!value && !(\r\n                value.startsWith('%') && value.endsWith('%') // if this parameter isn't specified in Config Settings, the proxy returns env variable name instead\r\n            );\r\n        }\r\n    }\r\n);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport '../node_modules/react-vis/dist/style.css';\r\nimport '../node_modules/azure-maps-control/dist/atlas.css';\r\n\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}