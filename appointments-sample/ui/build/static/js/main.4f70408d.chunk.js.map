{"version":3,"sources":["shared/AppointmentState.ts","shared/common/SignalRNotifications.ts","common/DurableHttpClient.ts","shared/common/Constants.ts","common/DurableEntitySet.ts","App.tsx","index.tsx"],"names":["AppointmentStatusEnum","EntityStateChangedMessage","entityName","entityKey","version","stateDiff","isEntityDestructed","msg","FormatEntityId","BackendBaseUri","DurableHttpClient","_configFabric","NullLogger","instance","request","url","includes","config","this","accessTokenFactory","then","accessToken","headers","fakeUserNamePromise","fakeUserName","DefaultHttpClient","DurableEntitySet","_entityNameLowerCase","attachToAll","items","toLowerCase","makeObservable","observable","attachAllEntities","initSignalR","EntitySets","fetchAndApplyAllEntityStates","entityId","getEntityState","attachEntity","undefined","createEntity","signalName","argument","signalEntity","callEntity","metadata","updateEntityMetadata","initialState","entityNameLowerCase","existingEntity","state","makeAutoObservable","fetchAndApplyEntityState","uri","HttpClient","post","content","JSON","stringify","Promise","resolve","reject","response","correlationId","parse","SignalResultPromises","Config","logger","EntityStates","stateContainer","entityState","entitySet","push","i","length","splice","desiredVersion","retryCount","currentEntityState","get","Error","applyStateChangesFrom","entityAdded","addOrUpdateEntityState","catch","err","MaxRetryCount","setTimeout","RetryBaseIntervalMs","log","LogLevel","item","existingStateContainer","Information","GetEntityId","Trace","removeEntityState","entityDeleted","expectedVersion","rfc6902","responsePromise","errorMessage","result","SignalRConn","HubConnectionBuilder","withUrl","httpClient","build","on","entityStateChangedMessageHandler","entitySignalResponseHandler","onclose","reconnectToSignalR","start","SignalRReconnectIntervalInMs","incomingEntityState","diff","setup","l","console","fetch","r","json","appState","userName","user_id","prompt","participantsText","inProgress","appointments","finally","App","observer","participants","split","map","p","trim","filter","newAppointmentId","Date","toISOString","alert","message","AppBar","position","color","className","Toolbar","TextField","fullWidth","label","placeholder","InputLabelProps","shrink","variant","size","value","disabled","onChange","evt","target","onKeyPress","key","preventDefault","createNewAppointment","Box","width","Button","onClick","AccountCircle","Typography","LinearProgress","height","List","appointment","ListItem","Paper","Grid","container","spacing","xs","status","Pending","Chip","Accepted","Declined","Object","keys","name","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4f70408d.chunk.js","sourcesContent":["\r\nexport enum AppointmentStatusEnum {\r\n    Pending = 0,\r\n    Accepted,\r\n    Declined\r\n}\r\n\r\n// Appointment state\r\nexport class AppointmentState\r\n{\r\n    participants: { [name: string]: AppointmentStatusEnum } = {};\r\n    status: AppointmentStatusEnum = AppointmentStatusEnum.Pending;\r\n}","import * as rfc6902 from 'rfc6902';\r\n\r\nexport class EntityStateChangedMessage {\r\n    \r\n    entityName: string = '';\r\n    entityKey: string = '';\r\n    version: number = 0;\r\n    stateDiff: rfc6902.Operation[] = [];\r\n    isEntityDestructed: boolean = false;\r\n\r\n    static GetEntityId(msg: EntityStateChangedMessage): string {\r\n        return EntityStateChangedMessage.FormatEntityId(msg.entityName, msg.entityKey);\r\n    }\r\n\r\n    static FormatEntityId(entityName: string, entityKey: string): string {\r\n        return `@${entityName}@${entityKey}`;\r\n    }\r\n}\r\n\r\nexport class EntitySignalResponseMessage {\r\n\r\n    entityName: string = '';\r\n    entityKey: string = '';\r\n    correlationId: string = '';\r\n    result: any;\r\n    errorMessage: string = '';\r\n}","import { DefaultHttpClient, HttpRequest, HttpResponse, NullLogger } from '@aspnet/signalr';\r\n\r\nimport { IDurableEntitySetConfig } from './IDurableEntitySetConfig';\r\nimport { ClientPrincipalHeaderName } from '../shared/common/Constants';\r\n\r\nexport const BackendBaseUri = '/a/p/i';\r\n\r\n// Custom HttpClient implementation for the purposes of DurableEntitySet\r\nexport class DurableHttpClient extends DefaultHttpClient {\r\n\r\n    constructor(private _configFabric: () => IDurableEntitySetConfig) {\r\n        super(NullLogger.instance);\r\n    }\r\n\r\n    send(request: HttpRequest): Promise<HttpResponse> {\r\n\r\n        // Applying custom config settings, but only when calling our backend\r\n\r\n        if (request.url!.includes(BackendBaseUri)) {\r\n\r\n            const config = this._configFabric();\r\n\r\n            if (!!config.accessTokenFactory) {\r\n                return config.accessTokenFactory().then(accessToken => {\r\n\r\n                    request.headers = {}\r\n                    request.headers['Authorization'] = 'Bearer ' + accessToken;\r\n\r\n                    return super.send(request);\r\n                });\r\n            }\r\n\r\n            if (!!config.fakeUserNamePromise) {\r\n                return config.fakeUserNamePromise.then(fakeUserName => {\r\n\r\n                    if (!!fakeUserName) {\r\n                        request.headers = {}\r\n                        request.headers[ClientPrincipalHeaderName] = fakeUserName;\r\n                    }\r\n\r\n                    return super.send(request);\r\n                });\r\n            }\r\n        }\r\n\r\n        return super.send(request);\r\n    }\r\n}\r\n","\r\nexport const SignalRClientHandlerName = \"entity-state-changed\";\r\n\r\nexport const SignalRSignalResponseHandlerName = \"entity-signal-response\";\r\n\r\nexport const ClientPrincipalHeaderName = 'x-ms-client-principal-name';\r\n\r\nexport const UpdateMetadataServiceMethodName = \"$update-entity-internal-metadata\";\r\n","import { makeAutoObservable, makeObservable, observable } from 'mobx';\r\nimport { HubConnectionBuilder, HubConnection, NullLogger, LogLevel } from '@aspnet/signalr';\r\nimport * as rfc6902 from 'rfc6902';\r\n\r\nimport { ISetEntityMetadataRequest } from '../shared/common/ISetEntityMetadataRequest';\r\nimport { EntityStateChangedMessage, EntitySignalResponseMessage } from '../shared/common/SignalRNotifications';\r\nimport { SignalRClientHandlerName, SignalRSignalResponseHandlerName, UpdateMetadataServiceMethodName } from '../shared/common/Constants';\r\nimport { DurableEntityClientStateContainer } from '../shared/common/DurableEntityClientStateContainer';\r\nimport { IDurableEntitySetConfig } from './IDurableEntitySetConfig';\r\nimport { DurableHttpClient, BackendBaseUri } from './DurableHttpClient';\r\n\r\nexport type EntityStateWithKey = { entityKey: string };\r\n\r\n// Client-side container for Durable Entities\r\nexport class DurableEntitySet<TState extends object> {\r\n\r\n    // All attached entities will appear in this observable array\r\n    items: (TState & EntityStateWithKey)[] = [];\r\n    \r\n    constructor(private _entityNameLowerCase: string, attachToAll: boolean = true) {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        this._entityNameLowerCase = this._entityNameLowerCase.toLowerCase();\r\n\r\n        makeObservable(this, { items: observable });\r\n        \r\n        if (attachToAll) {\r\n            this.attachAllEntities();\r\n        }\r\n    }\r\n\r\n    // Attach all entities of this type (that type you previously passed to ctor).\r\n    // Preloads all existing entities of this type and then automatically captures all newly created entities.\r\n    attachAllEntities(): Promise<void> {\r\n\r\n        DurableEntitySet.initSignalR();\r\n\r\n        // Registering ourselves as listeners for this type of entity\r\n        DurableEntitySet.EntitySets[this._entityNameLowerCase] = this.items;\r\n\r\n        // Loading all existing entities\r\n        return DurableEntitySet.fetchAndApplyAllEntityStates(this._entityNameLowerCase);\r\n    }\r\n\r\n    // Manually attach a single entity with specific key\r\n    attachEntity(entityKey: string): void {\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(this._entityNameLowerCase, entityKey);\r\n\r\n        if (!!DurableEntitySet.getEntityState(entityId)) {\r\n            return;\r\n        }\r\n\r\n        // Registering ourselves as listeners for this particular entity\r\n        DurableEntitySet.EntitySets[entityId] = this.items;\r\n        \r\n        DurableEntitySet.attachEntity(this._entityNameLowerCase, entityKey, undefined as any);\r\n    }\r\n\r\n    // Creates (or fetches existing) an entity\r\n    createEntity(entityKey: string): void {\r\n\r\n        DurableEntitySet.createEntity(this._entityNameLowerCase, entityKey, undefined as any);\r\n    }\r\n\r\n    // Sends a signal to the given entity\r\n    signalEntity(entityKey: string, signalName: string, argument?: any): Promise<void> {\r\n\r\n        return DurableEntitySet.signalEntity(this._entityNameLowerCase, entityKey, signalName, argument);\r\n    }\r\n\r\n    // Sends a signal to the given entity and returns a promise with results\r\n    callEntity(entityKey: string, signalName: string, argument?: any): Promise<any> {\r\n\r\n        return DurableEntitySet.callEntity(this._entityNameLowerCase, entityKey, signalName, argument);\r\n    }\r\n\r\n    // Updates metadata of the given entity\r\n    updateEntityMetadata(entityKey: string, metadata: ISetEntityMetadataRequest): Promise<void> {\r\n\r\n        return DurableEntitySet.updateEntityMetadata(this._entityNameLowerCase, entityKey, metadata);\r\n    }\r\n\r\n    // Produces a single observable state instance for an existing entity\r\n    static attachEntity<TState extends object>(entityName: string, entityKey: string, initialState: TState): TState {\r\n\r\n        DurableEntitySet.initSignalR();\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        const entityNameLowerCase = entityName.toLowerCase();\r\n\r\n        const existingEntity = this.getEntityState(EntityStateChangedMessage.FormatEntityId(entityNameLowerCase, entityKey));\r\n        if (!!existingEntity) {\r\n            // If it is a known entity, then just returning it\r\n            return existingEntity.state as TState;\r\n        }\r\n\r\n        if (!!initialState) {\r\n            makeAutoObservable(initialState);\r\n        }\r\n\r\n        // Try to asynchronously retrieve the state from server\r\n        this.fetchAndApplyEntityState(entityNameLowerCase, entityKey, 0, 0, initialState);\r\n\r\n        return initialState;\r\n    }\r\n\r\n    // Creates (or fetches existing) and produces a single observable state instance for a newly created entity\r\n    static createEntity<TState extends object>(entityName: string, entityKey: string, initialState: TState): TState {\r\n\r\n        // This empty request will create the entity, if it doesn't exist yet.\r\n        this.updateEntityMetadata(entityName, entityKey, {});\r\n\r\n        return this.attachEntity(entityName, entityKey, initialState);\r\n    }\r\n\r\n    // Sends a signal to the given entity\r\n    static signalEntity(entityName: string, entityKey: string, signalName: string, argument?: any): Promise<void> {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        const entityNameLowerCase = entityName.toLowerCase();\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityNameLowerCase}/${entityKey}/${signalName}`;\r\n        return this.HttpClient.post(uri, { content: JSON.stringify(argument) }).then();\r\n    }\r\n\r\n    // Sends a signal to the given entity and returns a promise with results\r\n    static callEntity(entityName: string, entityKey: string, signalName: string, argument?: any): Promise<any> {\r\n\r\n        // Inside Durable Functions entity names are always lower-case, so we need to convert\r\n        const entityNameLowerCase = entityName.toLowerCase();\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityNameLowerCase}/${entityKey}/${signalName}`;\r\n\r\n        return new Promise<any>((resolve, reject) => {\r\n\r\n            this.HttpClient.post(uri, { content: JSON.stringify(argument) }).then(response => {\r\n\r\n                const correlationId: string = JSON.parse(response.content as string).correlationId;\r\n                this.SignalResultPromises[correlationId] = { resolve, reject };\r\n\r\n            }, reject);\r\n        });\r\n    }\r\n\r\n    // Updates metadata of the given entity\r\n    static updateEntityMetadata(entityName: string, entityKey: string, metadata: ISetEntityMetadataRequest): Promise<void> {\r\n\r\n        return this.signalEntity(entityName, entityKey, UpdateMetadataServiceMethodName, metadata);\r\n    }\r\n\r\n    // Optionally setup with these optional settings\r\n    static setup(config: IDurableEntitySetConfig): void {\r\n        this.Config = config;\r\n        if (!this.Config.logger) {\r\n            this.Config.logger = NullLogger.instance;\r\n        }\r\n    }\r\n\r\n    private static Config: IDurableEntitySetConfig = { logger: NullLogger.instance };\r\n    private static HttpClient: DurableHttpClient = new DurableHttpClient(() => DurableEntitySet.Config);\r\n    private static EntitySets: { [entityName: string]: EntityStateWithKey[] } = {};\r\n    private static SignalResultPromises: { [correlationId: string]: { resolve: (res: any) => void, reject: (err: Error) => void } } = {};\r\n\r\n    private static SignalRConn: HubConnection;\r\n\r\n    private static readonly SignalRReconnectIntervalInMs = 5000;\r\n    private static readonly MaxRetryCount = 6;\r\n    private static readonly RetryBaseIntervalMs = 500;\r\n    \r\n\r\n    private static EntityStates: { [entityId: string]: DurableEntityClientStateContainer } = {};\r\n\r\n    private static getEntityState(entityId: string): DurableEntityClientStateContainer {\r\n        return this.EntityStates[entityId];\r\n    }\r\n\r\n    private static addOrUpdateEntityState(entityId: string, stateContainer: DurableEntityClientStateContainer): void {\r\n        this.EntityStates[entityId] = stateContainer;\r\n    }\r\n\r\n    private static removeEntityState(entityId: string): void {\r\n        delete this.EntityStates[entityId];\r\n    }\r\n\r\n    private static entityAdded(entityNameLowerCase: string, entityKey: string, entityState: EntityStateWithKey) {\r\n\r\n        const entityId = EntityStateChangedMessage.FormatEntityId(entityNameLowerCase, entityKey);\r\n\r\n        // Searching for entitySet either for this particular entity or for this type of entity\r\n        var entitySet = this.EntitySets[entityId];\r\n        if (!entitySet) {\r\n            entitySet = this.EntitySets[entityNameLowerCase];\r\n        } else {\r\n            delete this.EntitySets[entityId];\r\n        }\r\n\r\n        if (!entitySet) {\r\n            return;\r\n        }\r\n\r\n        // Adding the entityKey property to the state object, to allow binding commands\r\n        entityState.entityKey = entityKey;\r\n        entitySet.push(entityState);\r\n    }\r\n\r\n    private static entityDeleted(entityNameLowerCase: string, entityKey: string) {\r\n\r\n        const entitySet = this.EntitySets[entityNameLowerCase];\r\n        if (!entitySet) {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < entitySet.length; i++) {\r\n\r\n            if (entitySet[i].entityKey === entityKey) {\r\n                entitySet.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static fetchAndApplyEntityState(entityNameLowerCase: string, entityKey: string, desiredVersion: number, retryCount: number, currentEntityState: any = null): void {\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityNameLowerCase}/${entityKey}`;\r\n        this.HttpClient.get(uri).then(response => {\r\n\r\n            const stateContainer = JSON.parse(response.content as string) as DurableEntityClientStateContainer;\r\n            const entityId = EntityStateChangedMessage.FormatEntityId(entityNameLowerCase, entityKey);\r\n\r\n            if (!!desiredVersion && (stateContainer.version < desiredVersion)) {\r\n                throw new Error(`Expected ${entityId} of version ${desiredVersion}, but got version ${stateContainer.version}`);\r\n            }\r\n\r\n            if (!currentEntityState) {\r\n\r\n                // If there is no existing state, then using the newly arrived state object\r\n                currentEntityState = stateContainer.state;\r\n                makeAutoObservable(currentEntityState);\r\n                \r\n            } else {\r\n\r\n                // Otherwise applying the change to the existing object, so that UI is re-rendered\r\n                this.applyStateChangesFrom(currentEntityState, stateContainer.state);\r\n            }\r\n\r\n            if (!this.getEntityState(entityId)) {\r\n                \r\n                // Adding the newly-arrived state into collections, if any\r\n                this.entityAdded(entityNameLowerCase, entityKey, currentEntityState);\r\n            }\r\n\r\n            // (Re)registering this entity\r\n            this.addOrUpdateEntityState(entityId, { state: currentEntityState, version: stateContainer.version });\r\n\r\n        }).catch(err => {\r\n\r\n            if (retryCount < this.MaxRetryCount) {\r\n\r\n                // Retrying\r\n                retryCount++;\r\n                setTimeout(() => {\r\n\r\n                    this.fetchAndApplyEntityState(entityNameLowerCase, entityKey, desiredVersion, retryCount, currentEntityState);\r\n\r\n                }, retryCount * this.RetryBaseIntervalMs);\r\n                \r\n            } else {\r\n\r\n                this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to fetch entity state: ${err}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    private static fetchAndApplyAllEntityStates(entityNameLowerCase: string): Promise<void> {\r\n\r\n        const uri = `${BackendBaseUri}/entities/${entityNameLowerCase}`;\r\n        return this.HttpClient.get(uri).then(response => {\r\n\r\n            for (var item of JSON.parse(response.content as string)) {\r\n\r\n                const entityKey = item.entityKey;\r\n                const entityId = EntityStateChangedMessage.FormatEntityId(entityNameLowerCase, entityKey);\r\n                const stateContainer = item as DurableEntityClientStateContainer;\r\n\r\n                const existingStateContainer = this.getEntityState(entityId);\r\n                if (!existingStateContainer) {\r\n\r\n                    makeAutoObservable(stateContainer.state);\r\n                    this.addOrUpdateEntityState(entityId, stateContainer);\r\n\r\n                    // Adding the newly-arrived state into collections, if any\r\n                    this.entityAdded(entityNameLowerCase, entityKey, stateContainer.state as any);\r\n                    \r\n\r\n                } else if (existingStateContainer.version < stateContainer.version) {\r\n\r\n                    this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: ${entityId}, local version ${existingStateContainer.version}, remote version ${stateContainer.version}. State was updated.`);\r\n\r\n                    // Otherwise applying the change to the existing object, so that UI is re-rendered\r\n                    this.applyStateChangesFrom(existingStateContainer.state, stateContainer.state);\r\n                    existingStateContainer.version = stateContainer.version;\r\n\r\n                } else {\r\n\r\n                    this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: ${entityId} is already known and is up to date. Skipping.`);\r\n                }\r\n            }\r\n\r\n        }).catch(err => {\r\n            this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to fetch entity states: ${err}`);\r\n        });\r\n    }\r\n\r\n    private static entityStateChangedMessageHandler(msg: EntityStateChangedMessage): void {\r\n\r\n        const entityId = EntityStateChangedMessage.GetEntityId(msg);\r\n\r\n        this.Config.logger!.log(LogLevel.Trace, `DurableEntitySet: ${entityId} changed to version ${msg.version}`);\r\n\r\n        const existingStateContainer = this.getEntityState(entityId);\r\n        if (msg.isEntityDestructed) {\r\n\r\n            this.removeEntityState(entityId);\r\n\r\n            this.entityDeleted(msg.entityName, msg.entityKey);\r\n\r\n        } else if (!existingStateContainer) {\r\n\r\n            // If anybody is attached to this entity or this type of entity\r\n            if (!!this.EntitySets[entityId] || !!this.EntitySets[msg.entityName]) {\r\n                \r\n                // This entity is not known to us yet, so just trying to fetch its state from server\r\n                setTimeout(() => this.fetchAndApplyEntityState(msg.entityName, msg.entityKey, msg.version, 0), this.RetryBaseIntervalMs);\r\n            }\r\n           \r\n        } else {\r\n\r\n            const expectedVersion = existingStateContainer.version + 1;\r\n            if (msg.version > expectedVersion) {\r\n                \r\n                // Missed some updates, so now need to reload the state from server\r\n                this.fetchAndApplyEntityState(msg.entityName, msg.entityKey, msg.version, 0, existingStateContainer.state);\r\n\r\n            } else if (msg.version === expectedVersion) {\r\n\r\n                // Applying the change\r\n                rfc6902.applyPatch(existingStateContainer.state, msg.stateDiff);\r\n                existingStateContainer.version = msg.version;\r\n            }            \r\n        }\r\n    }\r\n\r\n    private static entitySignalResponseHandler(msg: EntitySignalResponseMessage): void {\r\n\r\n        const responsePromise = this.SignalResultPromises[msg.correlationId];\r\n        if (!responsePromise) {\r\n            return;\r\n        }\r\n\r\n        if (!msg.errorMessage) {\r\n            responsePromise.resolve(msg.result);\r\n        } else {\r\n            responsePromise.reject(new Error(msg.errorMessage));\r\n        }\r\n\r\n        delete this.SignalResultPromises[msg.correlationId];\r\n    }\r\n\r\n    private static initSignalR(): void {\r\n\r\n        if (!!this.SignalRConn) {\r\n            return;\r\n        }\r\n\r\n        // Configuring SignalR\r\n        this.SignalRConn = new HubConnectionBuilder()\r\n            .withUrl(`${BackendBaseUri}`, { httpClient: this.HttpClient, logger: this.Config.logger })\r\n            .build();\r\n\r\n        // Mounting event handlers\r\n        this.SignalRConn.on(SignalRClientHandlerName, msg => this.entityStateChangedMessageHandler(msg));\r\n        this.SignalRConn.on(SignalRSignalResponseHandlerName, msg => this.entitySignalResponseHandler(msg));\r\n\r\n        // Background reconnects are essential here. That's because in 'Default' or 'Classic' service mode\r\n        // clients get forcibly disconnected, when your backend restarts.\r\n        this.SignalRConn.onclose(() => this.reconnectToSignalR());\r\n\r\n        // Establishing SignalR connection\r\n        this.SignalRConn.start().then(\r\n            () => {\r\n                this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: successfully connected to SignalR`);\r\n            }, err => {\r\n                this.Config.logger!.log(LogLevel.Error, `DurableEntitySet: failed to connect to SignalR: ${err}`);\r\n            });\r\n    }\r\n\r\n    private static reconnectToSignalR() {\r\n\r\n        this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: reconnecting to SignalR...`);\r\n        this.SignalRConn.start().then(() => {\r\n            this.Config.logger!.log(LogLevel.Information, `DurableEntitySet: reconnected to SignalR`);\r\n        }, () => {\r\n            setTimeout(() => this.reconnectToSignalR(), this.SignalRReconnectIntervalInMs);\r\n        });\r\n    }\r\n\r\n    // Applies incoming changes to an existing observable object so, that UI is re-rendered\r\n    private static applyStateChangesFrom(currentEntityState: any, incomingEntityState: any): void {\r\n\r\n        // Need to preserve the entityKey field, if it is set\r\n        incomingEntityState.entityKey = currentEntityState.entityKey;\r\n\r\n        const diff = rfc6902.createPatch(currentEntityState, incomingEntityState);\r\n        rfc6902.applyPatch(currentEntityState, diff);\r\n    }\r\n}","import React from 'react';\r\nimport { makeAutoObservable } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { AppBar, Button, Box, Chip, Grid, LinearProgress, List, ListItem, Paper, TextField, Toolbar, Typography } from '@material-ui/core';\r\nimport { AccountCircle } from '@material-ui/icons';\r\n\r\nimport { DurableEntitySet } from './common/DurableEntitySet';\r\nimport { AppointmentState, AppointmentStatusEnum } from './shared/AppointmentState';\r\n\r\n// Setting up DurableEntitySet\r\nDurableEntitySet.setup({\r\n    logger: { log: (l, msg: string) => console.log(msg) },\r\n\r\n    fakeUserNamePromise: new Promise<string | null>((resolve) => {\r\n\r\n        // Trying to fetch current user name from server - this should work when deployed to Azure and EasyAuth properly configured\r\n        fetch('/.auth/me').then(r => r.json()).then(result => {\r\n\r\n            if (!result || !result.length) {\r\n                throw new Error('EasyAuth seems to be not configured. Falling back to a fake user name');\r\n            }\r\n\r\n            appState.userName = result[0].user_id;\r\n\r\n            // By returning null here we tell DurableEntitySet to proceed with using EasyAuth\r\n            resolve(null);\r\n\r\n        }).catch(() => {\r\n\r\n            // Asking the user for some fake user name. Obviously, we should never do it like that in production.\r\n            appState.userName = prompt('Enter your name:', 'Anonymous') as string;\r\n            resolve(appState.userName);\r\n        });\r\n    })\r\n});\r\n\r\n// App state container\r\nconst appState = makeAutoObservable({\r\n    userName: '',\r\n\r\n    participantsText: '',\r\n\r\n    inProgress: true,\r\n\r\n    // Here all appointment entities will appear\r\n    appointments: new DurableEntitySet<AppointmentState>('AppointmentEntity', false)\r\n});\r\n\r\n// Triggering initial load and handling its finish\r\nappState.appointments.attachAllEntities().finally(() => { appState.inProgress = false; });\r\n\r\n// Rendering that entity state\r\nexport const App = observer(\r\n    class App extends React.Component {\r\n\r\n        private createNewAppointment() {\r\n\r\n            const participants = appState.participantsText\r\n                .split(',')\r\n                .map(p => p.trim())\r\n                .filter(p => !!p);\r\n\r\n            // Generating unique entity key\r\n            const newAppointmentId = 'APP-' + new Date().toISOString();\r\n\r\n            // Creating a new entity\r\n            appState.inProgress = true;\r\n            appState.appointments.callEntity(newAppointmentId, 'init', participants)\r\n                .catch(err => alert(err.message))\r\n                .finally(() => { appState.inProgress = false; });\r\n\r\n            appState.participantsText = '';\r\n        }\r\n\r\n        render(): JSX.Element { return (<>\r\n\r\n            <AppBar position=\"static\" color=\"default\" className=\"app-bar\">\r\n                <Toolbar>\r\n\r\n                    <TextField\r\n                        fullWidth\r\n                        label=\"Comma-separated list of participants (or empty string to create appointment with yourself)\"\r\n                        placeholder=\"Alice, Bob, Charlie...\"\r\n                        InputLabelProps={{ shrink: true }}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={appState.participantsText}\r\n                        disabled={appState.inProgress}\r\n                        onChange={(evt) => appState.participantsText = evt.target.value as string}\r\n                        onKeyPress={(evt) => {\r\n                            if (evt.key === 'Enter') {\r\n                                evt.preventDefault();\r\n                                this.createNewAppointment();\r\n                            }\r\n                        }}\r\n                    />\r\n\r\n                    <Box width={20} />\r\n\r\n                    <Button variant=\"contained\" color=\"default\" size=\"large\" className=\"new-appointment-button\"\r\n                        disabled={appState.inProgress}\r\n                        onClick={() => this.createNewAppointment()}\r\n                    >\r\n                        Create new appointment\r\n                    </Button>\r\n\r\n                    <Box width={40} />\r\n\r\n                    <AccountCircle />\r\n                    <Box width={5} />\r\n                    <Typography>{appState.userName}</Typography>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            {appState.inProgress ? (<LinearProgress />) : (<Box height={4} />)}\r\n\r\n            <List>\r\n\r\n                {appState.appointments.items.length === 0 && (\r\n                    <Typography variant=\"h5\" className=\"empty-list-placeholder\" >\r\n                        No appointments created yet\r\n                    </Typography>\r\n                )}\r\n\r\n                {appState.appointments.items.map(appointment => (<ListItem><Paper className=\"appointment-paper\">\r\n\r\n                    <Grid container spacing={2}>\r\n\r\n                        <Grid item xs={2}>\r\n                            {appointment.status === AppointmentStatusEnum.Pending && (\r\n                                <Chip label=\"Pending\" color=\"default\" variant=\"outlined\" className=\"appointment-status-chip\" />\r\n                            )}\r\n                            {appointment.status === AppointmentStatusEnum.Accepted && (\r\n                                <Chip label=\"Everybody accepted\" color=\"primary\" variant=\"outlined\" className=\"appointment-status-chip\" />\r\n                            )}\r\n                            {appointment.status === AppointmentStatusEnum.Declined && (\r\n                                <Chip label=\"Someone declined\" color=\"secondary\" variant=\"outlined\" className=\"appointment-status-chip\" />\r\n                            )}\r\n                        </Grid>\r\n\r\n                        <Grid item xs={2}>\r\n                            <Typography className=\"participants-text\">Participants:</Typography>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={5} className=\"appointment-grid-cell\">\r\n                            {Object.keys(appointment.participants).map(name => (\r\n                                <Chip label={name}\r\n                                    color={appointment.participants[name] === AppointmentStatusEnum.Accepted ? 'primary' :\r\n                                        (appointment.participants[name] === AppointmentStatusEnum.Declined ? 'secondary' : 'default')}\r\n                                    className=\"participant-chip\"\r\n                                />\r\n                            ))}\r\n                        </Grid>\r\n\r\n                        <Grid item xs={1}>\r\n                            <Button fullWidth variant=\"contained\" color=\"primary\"\r\n                                disabled={appState.inProgress || appointment.status !== AppointmentStatusEnum.Pending}\r\n                                onClick={() => {\r\n                                    appState.inProgress = true;\r\n                                    appState.appointments.callEntity(appointment.entityKey, 'respond', true)\r\n                                        .catch(err => alert(err.message))\r\n                                        .finally(() => { appState.inProgress = false; });\r\n                                }}\r\n                            >\r\n                                Accept\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={1}>\r\n                            <Button fullWidth variant=\"contained\" color=\"secondary\"\r\n                                disabled={appState.inProgress || appointment.status !== AppointmentStatusEnum.Pending}\r\n                                onClick={() => {\r\n                                    appState.inProgress = true;\r\n                                    appState.appointments.callEntity(appointment.entityKey, 'respond', false)\r\n                                        .catch(err => alert(err.message))\r\n                                        .finally(() => { appState.inProgress = false; });\r\n                                }}\r\n                            >\r\n                                Decline\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={1}>\r\n                            <Button fullWidth variant=\"contained\" color=\"default\"\r\n                                disabled={appState.inProgress || appointment.status === AppointmentStatusEnum.Pending}\r\n                                onClick={() => {\r\n                                    appState.inProgress = true;\r\n                                    appState.appointments.callEntity(appointment.entityKey, 'delete')\r\n                                        .catch(err => alert(err.message))\r\n                                        .finally(() => { appState.inProgress = false; });\r\n                                }}\r\n                            >\r\n                                Delete\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </Paper></ListItem>))}\r\n            </List>\r\n        </>);}\r\n    }\r\n);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}